<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2023-10-06T17:18:00.161Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Resilience4j</title>
    <link href="http://KKimSangHeon.github.io/2023/10/07/Resilience4j/"/>
    <id>http://KKimSangHeon.github.io/2023/10/07/Resilience4j/</id>
    <published>2023-10-06T17:11:26.000Z</published>
    <updated>2023-10-06T17:18:00.161Z</updated>
    
    <content type="html"><![CDATA[<p>간략하게 정리하는 Resilience4j</p><h3 id="Resilience4j의-핵심적인-기능들"><a href="#Resilience4j의-핵심적인-기능들" class="headerlink" title="Resilience4j의 핵심적인 기능들"></a>Resilience4j의 핵심적인 기능들</h3><ul><li>CircuitBreaker </li><li>Bulkhead</li><li>RateLimiter</li><li>Retry</li><li>TimeLimiter</li><li>Cache</li></ul><h3 id="CircuitBreaker"><a href="#CircuitBreaker" class="headerlink" title="CircuitBreaker"></a>CircuitBreaker</h3><p>차단기와 같은것<br>장애가 다른곳으로 전파되지 않게해줌<br>HALF_OPEN, CLOSE, OPEN 상태가 있음</p><h3 id="Exception의-종류"><a href="#Exception의-종류" class="headerlink" title="Exception의 종류"></a>Exception의 종류</h3><p><code>IgnoreException</code><br>서킷의 상태변화를 일으키진 않으나 실패시 fallback메소드가 동작하게 함</p><p><code>RecordException</code><br>서킷의 상태변화를 일으키고 fallback또한 동작함</p><p><code>주의점</code><br>유효성검사나 NullPointerException처럼 서킷이 열리는것과 무관한 예외는 RecordException으로 등록하면 안됨<br>Exception or RuntimeException 처럼 너무 높은 수준의 예외 역시 recordExceptions으로 등록하면 안됨</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;간략하게 정리하는 Resilience4j&lt;/p&gt;
&lt;h3 id=&quot;Resilience4j의-핵심적인-기능들&quot;&gt;&lt;a href=&quot;#Resilience4j의-핵심적인-기능들&quot; class=&quot;headerlink&quot; title=&quot;Resilience4j의 핵심적인
      
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/CS/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="Resilience4j" scheme="http://KKimSangHeon.github.io/tags/Resilience4j/"/>
    
      <category term="CircuitBreaker" scheme="http://KKimSangHeon.github.io/tags/CircuitBreaker/"/>
    
  </entry>
  
  <entry>
    <title>nosql &amp; redis</title>
    <link href="http://KKimSangHeon.github.io/2023/01/08/redis/"/>
    <id>http://KKimSangHeon.github.io/2023/01/08/redis/</id>
    <published>2023-01-08T14:12:55.000Z</published>
    <updated>2023-01-08T14:16:02.902Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NOSQL"><a href="#NOSQL" class="headerlink" title="NOSQL"></a>NOSQL</h3><p>특징</p><p>데이터 간 관계가 중요하지 않음 (조인등의 연산이 없음)<br>고성능 머신에 데이터를 저장하는것이 아니라 분산해서 저장하고 분산해서 처리함.<br>분산해 저장하고, 분산해 복제해 데이터 유실이나 서비스 중지가 없음</p><p>CAP 이론을 따름<br>Partitioning(부분결함 용인) - 데이터가 유실 될 수 있다.<br>Consistency, Availability 두개 중 하나를 택할 수 있다.</p><p>RDB에서 10만쿼리를 처리할 때<br>memcached와 Redis등의 NoSQL제품에서 실행하면 30만 쿼리 이상 처리량을 내는것 조차 가능해진다.</p><p>클라이언트가 접속 &#x2F;해제를 반복해도 NoSQL 데이터베이스 테이블(파일)은 오픈한 상태를 유지하도록 제어하고 있다. 이로 인해 테이블의 열기&#x2F;닫기 비용이 발생하지 않아 경합을 크게 줄일 수 있으며 성능도 향상된다.</p><p><code>NoSQL 등장배경</code><br>대규모데이터 단순한 데이터를 처리하기 위해 나옴<br>기존 RDB의 단점을 보완하는 시스템</p><p><code>NOSQL단점</code><br>RDBMS에서 지원하는 기능을 갖고 있지 않기도 한다.</p><ol><li>트랜잭션 미지원<br>트랜잭션을 사용할 수 없기 때문에 실패한 작업을 없던 일로 하는것도 자동으로 할 수 없게된다.<br>또한 쓰기 도중에 크래시가 발생하면 어중간한 데이터를 없던일로 하는것도 마지막으로 커밋한 데이터까지 무사함을 보장할 수 없다. 즉 없어도 별로 상관없는 데이터에만 사용할 수 있다.</li><li>스키마가 없다.<br>NoSQL은 키에 해당하는 값을 가진것이 대부분이다. 값에는 임의의 바이트 열을 넣을 수 있는데 거기에 실제로 무엇이 들어있는지 직접 액세스 해보지 않으면 모른다. 각 열에 나눠져있는게 아니기에 RDBMS와 비교하면 이해하기 어렵다.</li><li>기본키 이외의 인덱스를 사용할 수 없다.<br>검색조건이 id가 아닌 이메일이나 주소 일 경우 새로운 인덱스를 부여해야한다. nosql의 대부분은 키와 값의 두가지 항목밖에 갖지않는다는 특성상 기본 키이외에 인덱스를 취할 수 없다.</li></ol><hr><hr><p><code>NoSQL의 용도</code><br>캐시<br>주로 NoSQL은 RDBMS의 캐시로서 사용된다. 이러한 용도로 정평이 나있는 제품이 memcached이다. NoSQL에서 캐시 히트한 경우는 고속의 NoSQL프로토콜로 액세스 할 수 있으므로 SQL문을 실행할 필요가 없어 처리가 빨라진다.<br>캐시로 사용하려면 RDBMS를 어떻게 갱신할지에 대한것이 과제이다.</p><p>세션데이터<br>캐시가 아닌 NoSQL만으로 데이터를 갖는다는 사례도 존재한다.<br>예를들어 최종 액세스 시각관리 등이 있다. SNS는 친구가 언제쯤 온라인 상태가 되었는지 추적하기 위해 사용한다.<br>이부분은 다소 정확성이 떨어져도 큰 문제가 되지 않으며 검색키도 사용자 id 이외가 될 수 없기때문에 다른 인덱스도 필요 없다.이 경우 무정지성을 다소 희생하고 성능쪽을 추구해도 좋다고 말할 수 있다.</p><p>특징<br>RDB<br>데이터의 일관성을 보증할 수 있다(트랜잭션)<br>설계시 중복이 삭제됨, 업데이트시 비용이 적다(정규화)<br>복잡한 형태의 쿼리도 가능(Join 등)<br>대량의 데이터를 다룰 때 한계가 있따</p><p>NoSQL<br>특정용도로 특화되어있음<br>분산이 용이함<br>Join 미제공<br>데이터를 여러 서버에 분산시키는게 좋음<br>데이터에 대한 캐시가 필요한경우<br>배열 형식의 데이터를 고속으로 처리할 필요가 있는경우<br>단점<br>각 솔루션에 특징을 이해해야함</p><p><code>NoSQL의 종류</code><br><a href="https://www.youtube.com/watch?v=Dvi_TsBMFJo">https://www.youtube.com/watch?v=Dvi_TsBMFJo</a> 12분</p><p>keyValue<br>key&#x2F;value 형태로 데이터를 저장하며 unique key 하나의 value를 가지고 있는 형태 put, get만 갖고있음<br>대표제품: 레디스</p><p>컬럼형 - ordered key, value store(컬럼형)<br>데이터가 내부적으로 key를 순서로 sorting되어 저장됨<br>key 안에 (column:value)조합으로 된 여러개의 필드를 가지는 구조<br>대표제품 : Hbase, Cassandra<br>열의 추가는 비용이 저렴하고 행 단위로 처리된다. 각 행은 서로 다른 열을 가지거나 아예 없을 수 있따.</p><p>Document key&#x2F;value store<br>저장되는 value의 데이터 타입으로 Document라 구조화된 데이터 타입을 사용(JSON,XML,YAML) 등<br>복잡한 계층구조 표현 가능<br>제품에 따라 추가기능(Soriting, Join, Grouping) 지원<br>대표제품 : MongoDB, CouchDB</p><p>GraphDB<br>페묵에서 만든 Tao: 각각의 entity를 저장하고 이를 관계로 연결함<br>neo4j또한 있음<br>노드사이의 관계를 알아야 할때 씀. 페북같은곳에서 씀</p><p>Document DB<br>몽고디비가 여기에 속함<br>json Document형태로 저장한다. 어떤 모양의 데이터든 저장할 수 있다</p><p>Key Value DB<br>CassandraDB, DynamoDB가 여기에 속함<br>카산드라: 읽고 쓰기가 엄청 빠름<br>DynamoDB : 서버리스 디비 읽고 쓰기가 엄청 빠름<br>Document db에 비해 데이터 종류가 제한적임.</p><p>GraphDB<br>페묵에서 만든 Tao: 각각의 entity를 저장하고 이를 관계로 연결함<br>neo4j또한 있음<br>노드사이의 관계를 알아야 할때 씀. 페북같은곳에서 씀</p><p>MySQL Cluster(NDB)<br>어떤때는 RDBMS로 사용하고 어떤 때는 NoSQL로 사용되는 제품이 있다. 대표적인 예가 NDB이다.</p><p>WriteScaling<br>다중마스터 구성을 통해 지역별 최적화를 진행하는것.</p><p>다중마스터 구성<br>도쿄 사용자에 대해서는 도쿄의 마스터를 업데이트하고 미국 서해한의 사용자는 미국 서해안의 마스터를 업데이트하면 업데이트에 걸리는 지연시간을 짧게 줄일 수 있따. 이렇듯 지역에 따라 최적화된 다중 마스터 구성도 앞으로 주목을 받게 될 것이다.<br>다중 마스터 구성의 과제는 갱신 충돌을 어떻게 감지할 것인가다. 동일 기본키에서 동시에 다른 마스터에서 업데이트 되는 현상이 발생했을 때 어느쪽을 통일하면 좋을까? 이러한 충돌을 감지하여 통일하는 구조가 필요하다</p><p>자동 shard 편성<br>한대의 서버에서 어플리케이션의 모든 갱신처리를 해야 하면 트래픽 증가로 조만간 파탄에 이르게 된다. 따라서 데이터마다 복수의 서버로 분산하여 한 대당 데이터 양을 줄이고 갱신 처리도 분산시키는 수평분할(sharding)이라고 하는 접근 방법이 웹 서비스에서는 잘 사용된다.<br>Sharding 구성을 취하기 위해서는 기본적으로 어떤 id가 어느 shard로 가는가 라는 매핑정보를 관리할 필요가 있다. 이를 위한 로직을 넣으면 스케일을 확장하기 매우 쉬운 서비스를 구축할 수 있다.<br>원래 2계통의 sharding을 구성한 상황에서 3계통으로 나누고 싶은경우는 데이터를 이동하는것이 힘들어진다. 이러한 재배치를 완전히 자동화 하는 데이터베이스도 나오고 있는데 Mysql cluster, Nosql세계에서는 Mongodb, Hbase등이 이러한 shard의 추가 및 재배치에 대응하고 있다.</p><h3 id="레디스"><a href="#레디스" class="headerlink" title="레디스"></a>레디스</h3><p>KV형태임. 데이터를 디스크로 쓰기(committing)전 메모리에 캐싱함으로써 놀랄 만한 성능을 얻는다. 대신에 하드웨어 장애 시 데이터가 유실될 위험성은 커진다.</p><p>Redis는 블로킹 큐(blocking queue) 또는 스택(stack)이 될 수 있으면서 발행- 구독(publish-subscribe) 시스템이 될 수도 있다. 그리고 우리가 구성 가능한 만기 정책, 지속성 수준, 복제 옵션 등의 기능을 갖고 있다.</p><p>Redis는 모든 값을 문자열로 저장한다. 그러나 문자열로 된 숫자를 정수(integer)로 인식하고 처리해주는 연산들을 제공한다. 만일 우리 데이터셋에 있는 단축 키들의 전체 개수를 유지하고 싶다면, 다음과 같이 count를 생성한 후 INCR 명령을 사용해서 그 값에 1을 더할 수 있다.<br>뭔소린가 했는데 결국 아래와 같다</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ SET count 2</span><br><span class="line">$ INCR count</span><br><span class="line">$ get count //3이나옴</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>INCR 외에도 DECR(1을 뺌), DECRBY(지정한 정수를 뺌)가 있다.</p><p>SET과 INCR 같은 두 개의 연산(명령)을 하나의 블록으로 묶으면 모두 다 성공 아니면 모두 실패로 처리된다(하나의 트랜잭션으로)</p><p>MULTI를 사용할 때, 우리가 정의하는 명령들은 PostgreSQL처럼 실제로 실행되지 않고 큐에 저장만 되었다가 EXEC 명령을 실행하면 그 때 차례대로 실행된다.SQL의 ROLLBACK과 유사하게, 트랜잭션 큐의 명령들을 지우는 DISCARD 명령을 사용하면 트랜잭션을 중지시킬 수 있다. 그러나 ROLLBACK과는 달리 DISCARD는 데이터베이스를 이전 상태로 복구하지 않고 트랜잭션만 실행을 취소시킨다. 메커니즘은 다르지만 효과는<br>동일하다.</p><p>컬렉션 데이터 타입들(리스트(list), 해시(hash), 셋(set), 정렬 셋(sorted set))은 키 하나당 엄청난 개수의 값들<br>을 가질 수 있다(22개의 요소들 또는 40억 개 이상),</p><h4 id="redis-해시"><a href="#redis-해시" class="headerlink" title="redis 해시"></a>redis 해시</h4><p>해시(Hash)는 키-값 쌍을 몇 개라도 가질 수 있는 Redis 객체이다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; MSET user:eric:name &quot;Eric Redmond&quot; user:eric:password s3cret</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; MGET user:eric:name user:eric:password</span><br><span class="line">1) &quot;Eric Redmond&quot;</span><br><span class="line">2) &#x27;s3cret&quot;</span><br></pre></td></tr></table></figure><p>위와 같이 논리적으로 키 필드를 구분(:)하는 대신, 키-값 쌍으로 된 데이터를 포함하는 해시를 생성할 수도 있다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1 : 6379&gt; HMSET user:eric name &quot;Eric Redmond&quot; password s3cret</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>해시의 모든 데이터 값을 읽을 때는 키 필드만 주면 된다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HVALS user:eric</span><br><span class="line">1) &quot;Eric Redmond&quot;</span><br><span class="line">2) &quot;s3cret&quot;</span><br></pre></td></tr></table></figure><p>또는 다음과 같이 모든 해시 키를 읽을 수 있다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HKEYS user:eric</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;password&quot;</span><br></pre></td></tr></table></figure><p>또는 해시 키(다음 예에서는 password)를 지정하여 하나의 값만 읽을 수도 있다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; HGET user:eric password</span><br><span class="line">&quot;s3cret&quot;</span><br></pre></td></tr></table></figure><p>문서형 데이터베이스인 MongoDB&#x2F;CouchDB와 다르게 Redis의 해시는 중첩될 수 없다(리스트 같은 다른 복잡한 데이터 타입에서도 안 된다). 즉, 해시는 문자열 값들만 저장할 수 있다(예를 들어, 해시의 값으로 또 다른 해시 데이터를 저장할 수 없다는 의미이다)..</p><h4 id="redis-list"><a href="#redis-list" class="headerlink" title="redis list"></a>redis list</h4><p>리스트(List)는 여러 개의 순서적인 값들을 포함하며, 큐와 스택 모두로 동작할 수 있다</p><p>insert 사용</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; RPUSH eric.wishlist 7wks gog prag</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p>리스트의 특정값 읽기 (처음부터 끝)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; LRANGE eric.wishlist 0.1</span><br><span class="line">1) &quot;7wks&quot;</span><br><span class="line">2) &quot;gog&quot;</span><br><span class="line">3) &quot;prag&quot;</span><br></pre></td></tr></table></figure><p>LREP은 주어진 키로부터 일치되는 값들을 삭제한다. 이때 삭제할 일치 값들의 개수를 알려줄 필요가 있다. 다음과 같이 0으로 주면 일치되는 값들 모두를 삭제한다.<br>0보다 큰 수를 주면 그 개수만큼의 일치 값들만 삭제하되 오른쪽 부터 일치값을 찾는다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1: 6379&gt; LREM eric:wishlist o gog</span><br></pre></td></tr></table></figure><p>기타 앞에서부터 꺼내는 LPOP, 오른쪽부터 꺼내는 RPOP 등이 있으며 , 큐와 유사한 효과를 낼 때는 LPUSH와 RPOP(또는 RPUSH와 LPOP)을 사용하고, 스택의 경우는 LPUSH와 LPOP(또는 RPUSH와 RPOP)을 사용하면 된다.</p><p>한 리스트의 끝에서 값들을 꺼내어(pop) 다른 리스트의 앞쪽에 넣는다(push), 그 명령은 RPOPL PUSH(오른쪽에서 pop.<br>왼쪽에 push)이다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; RPOPLPUSH eric:wishlist eric:visited</span><br><span class="line">&quot;prag&quot;</span><br></pre></td></tr></table></figure><p>꺼낼 값이 존재할 때까지 블로킹하는 명령어가 BRPOP</p><p>정렬셋<br>정렬셋은 리스트처럼 정렬되며 셋처럼 고유한 값들을 갖는다.  데이터를 추가할 때 해시나 리스트는 일정한 시간이 걸리는 반면, 정렬 셋은 log(N)의 시간이 소요된다 (여기서 N은 셋의 크기이다).</p><h3 id="발행구독"><a href="#발행구독" class="headerlink" title="발행구독"></a>발행구독</h3><p> 다수의 구독자들이 한 발행자의 메세지를 읽기 위해 Redis는 전문화된 발행- 구독 명령들을 제공한다.</p><h3 id="서버정보-조회"><a href="#서버정보-조회" class="headerlink" title="서버정보 조회"></a>서버정보 조회</h3><p>Redis 시스템의 설정 변경에 들어가기에 앞서 INFO 명령을 간단히 살펴볼 필요가 있다. 이 명령에 나오는 값들도 설정 변경 시에 바뀌기 때문이다. INFO 명령은 서버의 시스템 데이터 내역을 출력한다.</p><h3 id="레디스의-구성"><a href="#레디스의-구성" class="headerlink" title="레디스의 구성"></a>레디스의 구성</h3><p>&#x2F;etc&#x2F;redis에 위치함<br>Redis에는 지속성(Durability) 옵션들이 몇 개 있다. 첫 번째는 지속성이 전혀 없는 것으로서, 모든 값들을 그냥 메인 메모리에 유지하는 것이다. 만일 Redis를 기본적인 캐시 서버로 실행한다면 이것이 적절한 선택이다. 데이터의 지속성을 유지하려면 항상 지연시간이 증가되기 때문이다.</p><p>Redis가 다른 캐시(memcached 와 같이 빠른 액세스를 하는 캐시)와 차별되는 것 중 하나가 데이터 값들의 디스크 저장을 자체적으로 지원해주는 것이다. 기본적으로 키-값의 쌍으로 된 데이터들은 가끔씩만 저장된다. LASTSAVE 명령을 실행하면 Redis가 디스크에 성공적으로 썼던 가장 최근 시간을 유닉스의 타임스탬프 형식으로 알 수 있다. 또는 INFO 명령에서 출력하는 서버 정보 중에서 last_save_time 필드를 보면 된다. SAVE 명령을 실행하면 메모리에 있던 데이터 값을 디스크에 쓰게 되므로 그 시점까지의 지속성이 유지된다.</p><p>구성 파일의 스냅샷 설정을 변경하면 또 다른 지속성 방법을 설정할 수 있다.</p><p><code>스냅샷</code><br>save(디스크에 쓰기)할 시간 및 변경되어야 하는 키의 개수를 추가 또는 변경하면 스토리지에서 디스크로 쓰는 비율(시간 간격)을 변경할 수 있다. save 필드는 디폴트로 세 개가 있다. save 키워드가 제일 앞에 나오고, 그 다음에 시간(초)과 디스크에 쓰기 전에 변경되어야 하는 키들의 최소 개수가 따라 나온다</p><p>예를 들어, 만일 키가 하나라도 변경되는 경우 매 5분 (300초)마다 save를 촉발시키고자 한다면 다음과 같이 한다.<br>save 300 1</p><p>만일<br>10,000개의 키들이 변경되면 60초 이내에 save하게 되며, 10개의 키가 변경되면 300초 이내에 save한다. 그리고 어떤 키건 하나라도 변경되면 900초(15분) 이내에 save하라는 것이다.<br>save 900 1<br>save 300 10<br>save 60 10000</p><h3 id="Append-Only-파일"><a href="#Append-Only-파일" class="headerlink" title="Append-Only 파일"></a>Append-Only 파일</h3><p>기본적으로 Redis는 불확정 지속성(eventually durable)을 갖는다. 즉, 우리의 save 설정에 정의된 간격(변경된 키의 개수와 시간) 내에서 비동기적으로 값을 디스크로 쓰거나, 또는 클라이언트가 실행시킨 명령에 의해서 디스크에 쓴다. 이것은 보조 캐시나 세션 서버에는 용납될 수 있다. 그러나 재무 데이터와 같이 지속성이 필요한 데이터의 저장에는 불충분하다. 만일 Redis 서버에 장애가 생겨서 돈이 없어지기라도 한다면 사용자들이 수긍할 수 없기 때문이다.<br>Redis는 추가만 되는 append-only 파일(appendonly.aot)을 제공하는데, 이 파일은 모든 쓰기 명령들의 기록을 유지한다. 이것은 4장에서 알아본 Hbase의 WAL(선 로그, write ahead logging)과 같다. 만일 값이 디스크에 저장되기 전에 서버가 다운되면, 그 이후에 Redis서버가 시작될 때 다운되기 직전에 실행되던 명령들이 실행되어 상태(데이터)가 복구된다. 그러므로 redis.cont 구성 파일에서 appendonly는 반드시 yes로 설정되어야 한다.</p><p>그 다음에는 append-only 파일에 얼마나 자주 명령을 추가할 것인지를 결정해야 한다.<br>always로 설정하면 지속성은 더 좋다. 모든 명령이 수록되기 때문이다. 그러나 처리 속도가 느려지므로 사람들이 빠른 Redis를 사용하는 이유를 무색하게 만든다. 디폴트 설정은 everysec이다. 이것은 1초에 한 번씩만 명령을 수록한다. 절충안인 셈이다. 그러나 처리 속도는 충분히 빠르지만 최악의 경우 마지막 1초의 데이터는 유실될 수 있다. 마지막으로 no 옵션이 있다. 이것은 운영체제에게 처리를 맡기는 것으로서, 거의 선택하지 않으며, 이 옵션을 선택할 바에야 차라리 append-only 파일 옵션을 모두 지정하지 않는 게 더 좋을 것이다.</p><h3 id="보안"><a href="#보안" class="headerlink" title="보안"></a>보안</h3><p>만일 Redis에서 보안을 원한다면 좋은 방화벽과 SSH 보안을 사용하는 것이 더 나을 것이다. 흥미롭게도 Redis는 명령어 수준의 보안 기능을 제공하여 명령들을 숨기거나 실행을 금지할 수 있다. 예를 들어. 다음에서는 이 서버의 FLUSHALL 명령어(시스템의 모든 키 삭제)를 추측하기 어려운 값인 c283d93ac95287986023793b411e4ba2로 이름을 변경한다.<br>rename - command FLUSHALL c283d93ac9528f9860237936411e4ba2<br>그런 다음 이 서버에서 FLUSHALL을 실행하려 하면 에러가 발생한다. 우리가 이름을 변경한 엉뚱한 값이 FLUSHALL 대신 실행되려고 했기 때문이다.</p><p>또는 명령어를 빈 문자열로 설정하여 쓸 수 없게 할 수도 있다.<br>rename - command FLUSHALL “ “</p><h3 id="마스터-슬레이브-복제"><a href="#마스터-슬레이브-복제" class="headerlink" title="마스터 슬레이브 복제"></a>마스터 슬레이브 복제</h3><p>만일 하나의 서버를 어떤 다른 서버의 슬레이브로 설정하지 않는다면 그 서버가 마스터가 된다. 데이터는 모든 슬레이브 서버들에 복제된다.<br>실무에서는 일반적으로 가용성이나 백업 용도로 복제를 구현하므로 슬레이브 서버는 다른 머신에 둔다.</p><h3 id="블룸필터"><a href="#블룸필터" class="headerlink" title="블룸필터"></a>블룸필터</h3><p>블룸 필터는 셋에서 어떤 항목이 존재하지 않음을 확인(검사)하는 확률적 데이터 구조이다. 그리고 어떤 값이 시스템에<br>존재하지 않는지 여부를 빨리 알아볼 필요가 있을 때 유용하다.<br>블룸 필터는 어떤 값을 비트 시퀀스(연속된 비트)로 변환하고 그것을 통합 유지되는 모든 비트 시퀀스와 비교함으로써 그 값이 존재하지 않음을 확인한다. 달리 말해, 새로운 값이 추가되면 그것을 현재의 블룸 필터 비트 시퀀스와 OR 연산한다. 그리고 그 값이 시스템에 이미 있는지 여부를 확인하고 싶을 때는 블룸 필터의 비트 시퀀스에 대해 AND 연산을 수행한다. 이 개념을 그림으로 나타내면 아래와 같다.</p><p>36p 그림 참고하기</p><p>출력의 시작 부분에서는 and나 the 같은 흔한 단어들을 많이 볼 수 있을 것이다. 그리고 끝 부분 가까이에서는 unindustria처럼 거의 사용하지 않는 단어들이 점점 더 많이 나오게 될 것이다.<br>이 방법의 장점은 중복 단어들을 검출할 수 있다는 것이며, 단점은 false positives(한 번도 나왔던 적이 없는 단어가 블룸 필터에는 나왔었다고 표시되는 것)가 나올 가능성이 있다는 것이다.</p><p>블룸 필터들은 처리 속도가 더 늦은 내부 시스템(데이터베이스, 제한된 자원, 네트워크 요청) 에대한 불필요한 트래픽을 감소시키는 데 뛰어나다.  만일 여러 IP 주소를 갖는 더 느린 데이터 베이스가 있고, 우리 사이트에 접속하는 모든 새로운 사용자들을 유지 관리하고 싶다면, 블룸 필터를 사용해서 해당 IP 주소가 우리 시스템에 존재하는지 여부를 우선 확인할 수 있다. 만일 블룸 필터가 false를 반환하면, 그 IP 주소가 아직 추가되지 않았음을 알게 되어 그에 적절한 응답을 할 수 있다. 만일 블룸 필터가 true를 반환하면, 그 IP 주소는 백엔드 데이터베이스에 존재하거나 또는 존재하지 않을 수 있는 것이므로 이차적인 확인이 필요할 것이다.</p><p>블룸 필터의 합당한 크기를 계산하는 게 중요한 이유가 그 때문이다. 크기가 잘 산정된 블룸 필터는 에러율을 줄일 수 있으며(없앨 수는 없다), 또는 false positive의 가능성을 줄일 수 있다.</p><p>366부터</p><h3 id="redis-Sentinel"><a href="#redis-Sentinel" class="headerlink" title="redis Sentinel"></a>redis Sentinel</h3><p><a href="https://coding-start.tistory.com/126">https://coding-start.tistory.com/126</a><br>과반수 이상의 Sentinel이 “OK” 해야 비로소 그 마스터 노드는<br>죽은 것이고, 그때서야 Slave 노드에서 마스터 노드를 선출하게 되는 것입니다. 그렇기 때문에 Sentinel은<br>3개이상의 홀수 인스턴스를 띄운다 원칙을 지켜주셔야합니다.</p><p>운영환경에서 레디스는 일반적으로 마스터와 복제로 구성됩니다.   운영중 예기치 않게 마스터가 다운되었다면, 관리자가 이를 감지해서 복제를 마스터로 올리고 클라이언트들이 새로운 마스터에 접속할 수 있도록 해 주어야 합니다.   센티널은 마스터와 복제를 감시하고 있다가 마스터가 다운되면 이를 감지해서 관리자의 개입없이 자동으로 복제를 마스터로 올려줍니다.</p><h3 id="센티널은-다음과-같은-기능을-합니다"><a href="#센티널은-다음과-같은-기능을-합니다" class="headerlink" title="센티널은 다음과 같은 기능을 합니다."></a>센티널은 다음과 같은 기능을 합니다.</h3><p>모니터링 Monitoring : 센티널은 레디스 마스터, 복제들을 제대로 동작하는지 지속적으로 감시합니다.<br>자동 장애조치 Automatic Failover : 센티널은 레디스 마스터가 예기치 않게 다운되었을 때 복제를 새로운 마스터로 승격시켜 줍니다.   그리고 복제가 여러 대 있을 경우 이 복제들이 새로운 마스터로 부터 데이터를 받을 수 있도록 재 구성하고, 다운된 마스터가 재 시작했을 때 복제로 전환되어 새로운 마스터를 바라볼 수 있도록 합니다.<br>알림 Notification : 센티널은 감시하고 있는 레디스 인스턴스들이 failover 되었을 때 Pub&#x2F;Sub으로 Application(client)에게 알리거나 shell script로 관리자에게 이메일이나 SMS로 알릴 수 있습니다.</p><h3 id="Open-Graph"><a href="#Open-Graph" class="headerlink" title="Open Graph"></a>Open Graph</h3><p>펱이스북에서 만든것으로 페이지를 표현하는 것<br><a href="https://ogp.me/">https://ogp.me/</a><br>og:xxxxx 로 구성된 태그임(og:title, og:image, og:description)</p><p>카톡에서 메세지로 링크 보냈을 때 아래 추가설명 뜨는게 얘를 띄워주는것임</p><h3 id="Failover"><a href="#Failover" class="headerlink" title="Failover"></a>Failover</h3><p>Active한 시스템에 장애가 발생했을 때 StandBy 서버가 Active로 전환해서 서비스가 계속 운영되게 하는것. (HA)<br>자동화된 Failover를 위해 Coordinator, VIP, DNS를 이용하는 방법이 있다.</p><p>Coordinator: 기존서비스와 Coordinator의 연동필요<br>VIP: 장애가 발생하면 VIP가 가르키는 실제주소를 바꿈. client는 VIP를 계속 사용함.<br>DNS: 장애가 발생하면 DNS를 변경함. DNS는 TTL이 존재하므로 이를 짧게 잡아야하고, 특정 어플리케이션은 DNS를 영구 캐시할 수 있으므로 주의!</p><h3 id="shading"><a href="#shading" class="headerlink" title="shading"></a>shading</h3><p>Horizontal Partitioning을 의미함</p><p>방식은 Range, Modular, Indexed 가 있다.<br>Range 는 0~1000 은 1번서버, 1001부터 2000은 2번서버 할당</p><p>Modular은 데이터가 증가하여 서버를 늘려야할 경우 2배씩 늘린다.<br>서버추가에 따른 리밸런싱이 발생해도 데이터 이동을 최소화 하기 위해</p><p>Indexed는 각 데이터가 위치하는곳을 관리하는 서비스를 추가하는것.</p><h3 id="Consistent-Hashing"><a href="#Consistent-Hashing" class="headerlink" title="Consistent Hashing"></a>Consistent Hashing</h3><p>Modular 방식의 경우 서버의 추가 삭제시에 리밸런싱이 계속 일어난다.<br>Consistent Hashing은 리밸런싱을 적게 발생시킴<br>해시한 값보다 크고 가장 가까운 위치의 서버에 데이터를 위치시키는것.<br>원형구조에서 우측으로 간다고 보면 됨</p><p>이는 부하가 자칫 한쪽으로 쏠릴 수 있는데 부하에 안정적으로 하기위해 Virtual Node 개념을 적용하기도 함</p><p>해쉬를 적용할 땐 ip보다는 서버의 nickname를 활용한다.(상면이동, 사양변경 등 ip가 변경될 수 있다)</p><h3 id="GUID"><a href="#GUID" class="headerlink" title="GUID"></a>GUID</h3><p>Global Unique ID<br>많은 기업은 Unique한 ID를 만들기 위해 별도의 GUID 서버를 쓰곤 한다.</p><h3 id="비동기-큐"><a href="#비동기-큐" class="headerlink" title="비동기 큐"></a>비동기 큐</h3><p>비동기 큐를 사용할 때 유저는 쓰기 요청 후 조회할 경우 아직 DB에 반영이 안되어 응답이 실패할 수 있는데<br>이런 경우를 최소화 하기위해 실제로 서비스에서는 캐시에 먼저 저장해서 결과를 볼 수 있게한다.(Write-Back이라고 하며 캐시에 쓰고 이후엔 진짜로 저장장소에 저장)</p><p>작업큐는 대규모 트래픽이 발생했을 땐 처리량을 조절하는 Back Pressure로 동작한다.</p><h3 id="무정지배포"><a href="#무정지배포" class="headerlink" title="무정지배포"></a>무정지배포</h3><p><code>롤링업데이트</code> - 한대를 lb에서 내리고 배포하고, 그 다음 한대를 내리고 배포하고.. 순차적으로 하나씩 배포<br><code>블루그린</code> - 블루셋, 그린셋이 존재함. 현재 블루셋으로 서비스 중이라면 같은양의 그린을 준비해서 그린셋에 새로운 버전을 배포하고 블루셋을 바라보는 설정을 그린을 바라보도록 수정함. 이후 문제가 없다면 블루셋을 내림. 장애가 있다면 바라보는 것을 바꿈.</p><p>blue-green은 같은 수의 장비를 두셋트가 필요하다. cloud의 경우 기존장비를 내리면 되므로 유지비에 큰 차이가 없음. on-premis라면 낭비해야하는 서버가 생김</p><p>on-premis에서 blue-green을 도입하려면 사용하는 리소스를 절반으로 제한하고, 한 서버에 두개의 프로세스와 프록시를 실행한다.<br>즉 리소스를 풀로 사용하지 못하는 단점이 있음. 그래서 부하가 많은 상황에서 oom이 발생할 수 있음.</p><p><code>canary 배포</code> - 몇대만 배포해서 장애를 살펴보자! 100대 중 2~3대만 배포해서 확인해보자<br>그렇다면 여러번 접속했을 때 동작방식이 달라질 수 있는데. 이땐 유저에 태그를 걸어서 특정서버(배포된 서버)로 리다이렉트 되도록 하는 방식등을 활용할 수 있다.</p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>모든 데이터의 키는 HashMap에 저장된다</p><p><code>list</code><br>lpush, lpop, rpop, lpop, lrange 명령어가 있다.<br>rpop, lpop은 데이터가 없으면 바로 리턴함. brpop는 블로킹되어 데이터가 들어오면 리턴함</p><p><code>set</code><br>sadd, sismemeber, srem, smembers 명령어가 있다</p><p><code>stored set</code><br>skiplist 자료구조를 사용함. log(N)의 검색 속도<br>zadd, zrange, zreverange, zrangebyscore  명령어가 있다.</p><p><code>hash</code><br>레디스 자체가 해쉬구조인데 그 안에 subkey -&gt; subvalue를 갖는구조임<br>즉 hash -&gt; subkey -&gt; subvalue 형태<br>일반적인 key&#x2F;value를 특정군의 데이터로 묶고싶을때 유용<br>hset,hget, hmset, hmget, hgetall, hvals 명령어가 있다.</p><p>레디스는 싱글쓰레드이기 때문에 명령들이 원자성을 보장한다.<br><code>Multi, Exec</code>라고 여러개를 한번에 실행하는것이 있음. 많은것들을 한번에 실행하면 성능이 떨어질 수 있음</p><p><code>Redis pipeline</code><br>레디스를 사용하는 경우 클라이언트 라이브러리에서 데이터를 보내고 결과를 기다리고 보내고 결과를 기다리고 보내고 하기때문에 딜레이가 있다.<br>이를 개선하기 위해 파이프라인이란것을(라이브러리에서 제공) 활용하여 응답을 기다리지 않고 명령을 미리 보내는방식을 사용할 수 있다.<br>(원래 비동기로 처리하는 Async Redis Client라면 redis pipeline 기능을 따로 제공할 필요가 없다. ex. Java의 Lettuce Redis Client 같은 경우)</p><p><code>8:2의 법칙 - 파레토의 법칙</code><br>80%의 행동이 전체 20%의 결과를 나타냄<br>비유:: 대한민국 부자의 20%가 전체의 80%를 소유함<br>즉 80%의 활동을 20%의 유저가 하기 때문에 20%의 데이터를 캐시하면 서비스의 대부분의 데이터를 커버할 수 있다!</p><p>적은 데이터가 빈번하게 접근될 때 유용하다.</p><p>Look aside cache<br>캐시에 있으면 캐시를 쓰고 캐시에 없으면 디비에서 조회해 캐시를 채워넣는것!</p><p><code>Key를 어떻게 정의해야 할까?</code><br>Api endpoint만으로 유일성이 보장될까?</p><ul><li>api:feeds<br>특정 유저의 feed. 유저 ID가 들어갈 수 있다. User1234라면</li><li>api:feeds:1234<br>그 외 옵션(기간)</li><li>api:feeds:1234:20200901:20200920</li></ul><p><code>Value 를 어떻게 정의해야 할까?</code><br>응답결과를 그대로 저장하거나, 실제 필요한 부분만 저장</p><p><code>시간순으로 가져오고, 특정 시간대만 가져오고자 한다면?</code><br>Sorted set사용을 하기 위해 Zadd를 사용하고 가져올 땐 zrevrange를 사용한다.</p><p><code>사용예</code></p><ul><li>JWT의 경우에는 해당 키가 유용한지 여부만 저장하고, 실제 유저 정보는 jwt 안에 저장하는 경우가 많음</li><li>access token의 경우 value는 유저정보&#x2F;권한, 토큰의 유효기간등을 넣기도 함</li><li>view count를 누적할 때 사용하기도 함. (+ api 호출 제한)</li></ul><p><code>Thundering Herd</code><br>번개가 칠 때 동물들이 일제히 뛰어가는것을 나타내는것<br>즉 특정이벤트로 인해 많은 프로세스가 동작하는데 이 동작들이 경쟁하는 상황. 즉 특정서버(ex db)에 부하를 극도로 증가시키는것</p><p>10000개의 요청이 캐시를 히트하지 못해 디비에 간다. 이후 캐시에 다시 저장하기 위해 디비에 10000개의 요청이 일제히 간다</p><p>원인: 캐시가 없을 때 발생<br>캐시 서버의 추가&#x2F;삭제 - 리밸런싱<br>해당키의 TTL에 의한 데이터 삭제<br>캐시서버 메모리 부족으로 해당키의 eviction</p><p><code>Cache Stampede</code><br>Cache의 Expire Time설정으로 인해 대규모의 중복된 디비 쿼리와 중복된 Cache쓰기가 발생하는 현상</p><p>해결방법: 키의 TTL이 완료하기 전에 Random 한 가상의 Expire Time을 설정해서 미리 키의 내용을 갱신하는 방법(Probabilistic Early Recomputation)<br>공식은 아래와 같다.</p><p>Now() + abs(DELTA * BETA * log(random())) &gt; expiry<br>DELTA: 실제로 캐시 재계산을 위한 시간 범위(ex. 대략 500ms 근처에서 재계산이 일어나면 좋겠다.)<br>BETA: DELTA에 다시 가중치를 준다. 보통은 1을 쓰며 1보다 크면 적극적으로 작으면 소극적으로 재계산을 한다.<br>Expiry는 캐시가 Expire 될 시간을 말함</p><p><code>Hot Key</code><br>과도하게 읽기&#x2F;쓰기 요청이 집중되는 key. 해당 Key의 접근으로 인해서 Storage(DB, Cache) 성능 저하가 발생하는 Key</p><p>캐시의 최대 성능이 100,000 TPS 일때 150.000 이 들어오면 5만캐는 캐시가 응답을 하지 않아 DB로 간다.<br>해결방법:<br>  읽기분배 : Query Off(Read From Secondry) -  레플리카를 여러개둬서 부하분산. Write는 Primary, Read는 Secondary<br>  Local Cache with Redis - 서버와 통신해서 값을 업데이트 해야함. 재수없으면 서버마다 다른 데이터를 갖고있을수도..데이터가 변경되었을 때 통지받는 메커니즘이 필요.(hazelcast, redis v6)<br>  Multiple Write And Read From One - 여러 레플리카에 N번쓰고 하나에서 읽어간다. 쓰기부하가 읽기부하보다 작기때문에 가능. 좀 더 많은 캐시 장비를 써야하고, wirte시 많이 써야한다는점</p><p><code>Timeout</code>를 잡을 땐 Caller의 Timeout설정이 Callee보다 커야한다.</p><p>읽어보면 좋을 주제<br><code>How to sync client-side/local cache with distributed cache like Redis</code><br><a href="https://medium.com/nerd-for-tech/how-to-sync-client-side-local-cache-with-distributed-cache-like-redis-5ec39160cab8">https://medium.com/nerd-for-tech/how-to-sync-client-side-local-cache-with-distributed-cache-like-redis-5ec39160cab8</a><br>Redis 6.0.0 부터 지원되는기능으로 Client Tracking 을 지원함<br><a href="https://redis.io/commands/client-tracking/">https://redis.io/commands/client-tracking/</a></p><p>&#x2F;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;NOSQL&quot;&gt;&lt;a href=&quot;#NOSQL&quot; class=&quot;headerlink&quot; title=&quot;NOSQL&quot;&gt;&lt;/a&gt;NOSQL&lt;/h3&gt;&lt;p&gt;특징&lt;/p&gt;
&lt;p&gt;데이터 간 관계가 중요하지 않음 (조인등의 연산이 없음)&lt;br&gt;고성능 머신에 데이터를 
      
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/CS/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="Redis" scheme="http://KKimSangHeon.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Weak References in Java</title>
    <link href="http://KKimSangHeon.github.io/2022/12/04/java-reference/"/>
    <id>http://KKimSangHeon.github.io/2022/12/04/java-reference/</id>
    <published>2022-12-04T09:49:06.000Z</published>
    <updated>2022-12-04T09:50:28.719Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.baeldung.com/java-weak-reference">https://www.baeldung.com/java-weak-reference</a></p><p>string reference, weak reference, soft reference, phantom reference</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/java-weak-reference&quot;&gt;https://www.baeldung.com/java-weak-reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;string reference, weak ref
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kafka vs rabbitMQ</title>
    <link href="http://KKimSangHeon.github.io/2022/07/30/kafkavsrabbitmq/"/>
    <id>http://KKimSangHeon.github.io/2022/07/30/kafkavsrabbitmq/</id>
    <published>2022-07-30T06:54:23.000Z</published>
    <updated>2022-07-30T06:55:40.190Z</updated>
    
    <content type="html"><![CDATA[<p>kafka와 rabbitMQ에 대해 좋은 비교글이 있어 정리해본다.</p><p><a href="https://www.cloudamqp.com/blog/when-to-use-rabbitmq-or-apache-kafka.html">https://www.cloudamqp.com/blog/when-to-use-rabbitmq-or-apache-kafka.html</a></p><h3 id="Kafka-vs-rabbitMQ-정리"><a href="#Kafka-vs-rabbitMQ-정리" class="headerlink" title="Kafka vs rabbitMQ 정리"></a>Kafka vs rabbitMQ 정리</h3><p>rabbitMQ는 데이터를 큐에 넣어서 처리함.<br>kafka는 데이터를 로그파일로 저장함</p><p>RabbitMQ는 높은 처리량을 처리할 수 있습니다. 일반적인 사용 사례는 백그라운드 작업을 처리하거나 마이크로 서비스 간의 메시지 브로커 역할을 하는 것입니다.</p><p> Kafka는 높은 수신 데이터 스트림 및 재생에 최적화된 메시지 버스입니다. Kafka는 애플리케이션이 디스크에서 스트리밍된 데이터를 처리하고 재처리할 수 있는 내구성 있는 메시지 브로커로 볼 수 있습니다.”</p><p><code>내부구조</code></p><p>RabbitMQ에서 Exchange, Queues는?<br>Channel은 조선일보 신문이 no1이라는 구독 채널이고, 한겨례 신문이 no2라는 구독 채널이라고 생각해도 된다. 각자 구독중인 신문만 받아야할고 각자 우편함이 따로 존재할 것이다.</p><p>Exchange는 들어온 데이터를 제공하기 위해 구독 조건에 따라 Queue에 넣는다. 즉 Producer가 전달한 메세지를 Queue에 전달하는 역할. 메세지가 Queue에 직접 전달되지 않고 exchange type이라는 속성에 정의된대로 동작</p><p>Exchange Type : 특정 Queue에 보낼지 여러 Queue에 보낼지 제거될지등을 선택</p><p>Queues는 사용자마다 생성된다. Queue는 Exchange에 Binding된다.</p><p>Bindings: Exchange와  Queue를 연결해주는것.</p><p>RoutingKey: Exchange와 Queue가 Binding될 때 Exchange가 Queue에 메세지를 전달할지를 결정하는 기준.<br>Public RoutingKey가 Binding시 설정된 RoutingKey값과 일치하거나 (exchange type&#x3D;direct) RoutingKey 값이 Binding시 설정된 패턴에 매칭될 때(exchange type&#x3D;topic)</p><p>Consumer은 메시지 수신을 위해 Queue를 실시간으로 리스닝함.<br><a href="https://brunch.co.kr/@springboot/695">https://brunch.co.kr/@springboot/695</a><br><a href="https://hyunalee.tistory.com/39">https://hyunalee.tistory.com/39</a></p><p><code>메시지 처리</code></p><p>Kafka : 대부분의 메시징 시스템과 달리 Kafka의 메시지 대기열은 영구적입니다. 전송된 데이터는 지정된 보존 기간(일정 기간 또는 크기 제한)이 지날 때까지 저장됩니다. 메시지는 보존 기간&#x2F;크기 제한을 초과할 때까지 대기열에 남아 있습니다. 즉, 메시지가 소비된 후에는 제거되지 않습니다. 대신 여러 번 재생하거나 소비할 수 있으며 이는 조정 가능한 설정입니다.</p><blockquote><p> 재생이 유용한 경우는 소비자에게 최신 버전을 배포해야 하는 버그가 있고 메시지의 일부 또는 전체를 다시 처리해야 하는 경우입니다</p></blockquote><p>RabbitMQ: RabbitMQ에서 메시지는 수신 애플리케이션이 연결되어 대기열에서 메시지를 수신할 때까지 저장됩니다. 클라이언트는 메시지를 수신하거나 클라이언트가 메시지를 완전히 처리했을 때 메시지를 확인(확인)할 수 있습니다. 두 경우 모두 메시지가 확인되면 대기열에서 제거됩니다.</p><p><code>Protocol</code><br>“RabbitMQ는 AMQP 0.9.1을 기본적으로 구현하는 AMQP, MQTT, STOMP 등과 같은 여러 표준화된 프로토콜을 지원합니다</p><p>Kafka는 애플리케이션과 클러스터 간의 통신을 위해 TCP&#x2F;IP 위에서 동작합니다.</p><p><code>Routing</code><br>Kafka는 매우 간단한 라우팅 접근 방식을 가지고 있습니다. 복잡한 방법으로 소비자에게 메시지를 라우팅해야 하는 경우 RabbitMQ가 더 나은 옵션을 제공합니다.</p><p>RabbitMQ의 가장 큰 장점은 메시지를 유연하게 라우팅할 수 있다는 것입니다. 직접 또는 정규식 기반 라우팅을 사용하면 추가 코드 없이 메시지가 특정 대기열에 도달할 수 있습니다.<br>direct 교환은 라우팅 키라고 하는 것과 정확히 일치하는 모든 대기열로 메시지를 라우팅합니다. 팬아웃 교환은 교환에 바인딩된 모든 큐에 메시지를 브로드캐스트할 수 있습니다. topic 메소드는 라우팅 키를 사용한다는 점에서 direct와 유사하지만 정확한 일치와 함께 와일드카드 일치를 허용합니다.</p><p>Kafka는 라우팅을 지원하지 않습니다.<br>kafka stream을 활용하면 동적 라우팅을 할 수 있다.</p><p><code>Message Priority</code><br>RabbitMQ는 우선 순위 대기열이라는 것을 지원합니다. 즉, 대기열이 우선 순위 범위를 갖도록 설정할 수 있습니다.</p><p>Kafka에서는 메시지를 우선 순위 수준으로 보내거나 우선 순위에 따라 전달할 수 없습니다. Kafka의 모든 메시지는 소비자 측이 얼마나 바쁜지에 관계없이 수신된 순서대로 저장되고 전달됩니다.</p><p><code>Acknowledgment (Commit or Confirm)</code><br>Kafka와 RabbitMQ는 게시된 메시지가 브로커에 안전하게 도달했는지 확인하기 위해 생산자 확인(publisher는 RabbitMQ에서 확인)을 지원합니다.</p><p>RabbitMQ는 메시지가 전송되면 전달된 것으로 간주하거나 수신된 경우 소비자가 수동으로 승인할 때까지 기다릴 수 있습니다. RabbitMQ 클라이언트는 메시지 처리에 실패할 때 메시지를 nack(부정적 승인)할 수도 있습니다. 메시지는 새 메시지인 것처럼 원래 큐에 반환됩니다. 이는 소비자 측에서 일시적인 오류가 발생한 경우에 유용합니다.</p><p>Kafka는 파티션의 각 메시지에 대한 오프셋을 유지합니다. 커밋된 위치는 저장된 마지막 오프셋입니다. 프로세스가 실패하고 다시 시작되면 이것이 복구될 오프셋입니다. Kafka의 소비자는 주기적으로 오프셋을 자동으로 커밋하거나 커밋된 위치를 수동으로 제어하도록 선택할 수 있습니다.</p><p><code>Queue가 어떻게 동작하나</code><br>RabbitMQ의 대기열은 비어 있을 때 가장 빠른 반면 Kafka는 대량의 메시지를 보관 및 배포하도록 설계되었습니다. Kafka는 오버헤드가 거의 없이 많은 양의 데이터를 유지합니다.</p><p>RabbitMQ를 사용해 본 사람들은 아마도 지연 대기열 기능을 인식하지 못할 것입니다. 지연 대기열은 메시지가 디스크에 자동으로 저장되어 RAM 사용량을 최소화하지만 처리 시간은 연장되는 대기열입니다. 경험상 지연 대기열은 더 나은 예측 성능으로 더 안정적인 클러스터를 생성합니다. 한 번에 많은 메시지를 보내는 경우(예: 일괄 작업 처리) 또는 소비자가 게시자의 속도를 일관되게 따라가지 못한다고 생각되면 지연 대기열을 활성화하는 것이 좋습니다.</p><p><code>Scaling - CONSUMER SCALING</code><br>pub이 빨라지면 Queue가 커지기 시작하고 결국 RabbitMQ의 메모리가 부족해질 수 있습니다. 이 경우 메시지를 처리(Consumer)하는 소비자 수를 조정할 수 있습니다. 메시지 처리는 모든 활성 소비자에 분산되어 있으므로 단순히 소비자를 추가 및 제거하여 RabbitMQ의 확장 및 축소를 수행할 수 있습니다.</p><p>Kafka에서 Subscriber를 분산하는 방법은 그룹의 각 소비자가 하나 이상의 파티션 전용인 토픽 파티션을 사용하는 것입니다</p><p><code>Scaling - BROKER SCALING</code><br>Kafka는 수평 확장(adding more machines)을 염두에 두고 처음부터 구축된 반면 RabbitMQ는 대부분 수직 확장(adding more power)을 위해 설계되었습니다.</p><p>RabbitMQ에서는 수평 확장이 가능하지만, 이는 노드 간에 클러스터링을 설정해야 한다는 것을 의미하므로 설정 속도가 느려질 수 있습니다.</p><p>Kafka에서는 클러스터에 더 많은 노드를 추가하거나 topic에 더 많은 파티션을 추가하여 확장할 수 있습니다.<br>이것은 RabbitMQ에서 해야 하는 것처럼 CPU나 메모리를 기존 시스템에 추가하는 것보다 쉽기도 합니다.</p><p>Confluent를 비롯한 많은 사람들과 블로그에서 Kafka가 확장성에 얼마나 뛰어난지에 대해 이야기하고 있습니다. 그리고 확실히 Kafka는 RabbitMQ보다 더 확장할 수 있습니다. 왜냐하면 구매할 수 있는 기계의 크기에는 항상 한계가 있기 때문입니다.</p><p><code>로그 압축</code><br>RabbitMQ에는 없는 Apache Kafka에서 언급할 가치가 있는 기능은 로그 압축 전략입니다.<br>로그 압축은 Kafka를 데이터베이스로 사용하는 방법으로 볼 수 있습니다. 보존 기간을 “영구”로 설정하거나 주제에 대한 로그 압축을 활성화하면 데이터가 영원히 저장됩니다.</p><p>로그 압축을 사용하는 예는 실행 중인 수천 개의 클러스터 중 하나의 클러스터의 최신 상태를 표시할 때입니다. 클러스터가 항상 응답하는지 여부를 저장하는 대신 최종 상태를 저장합니다. 현재 대기열에 있는 메시지 수와 같은 최신 정보를 즉시 사용할 수 있습니다.</p><p><code>푸시 또는 풀</code><br>메시지는 RabbitMQ에서 소비자로 푸시됩니다. 소비자를 압도하는 것을 방지하기 위해 프리페치 제한을 구성하는 것이 중요합니다(메시지가 소비자가 처리할 수 있는 것보다 더 빨리 대기열에 도착하는 경우).<br>소비자는 RabbitMQ에서 메시지를 가져올 수도 있지만 권장하지 않습니다. 반면 Kafka는 앞에서 설명한 대로 소비자가 주어진 오프셋에서 일괄 메시지를 요청하는 풀 모델을 사용합니다.</p><p><code>RabbitMQ 사용사례</code><br>내 요구 사항이 채널&#x2F;대기열을 통한 시스템 통신을 처리하기에 충분히 간단하고 보존 및 스트리밍이 요구 사항이 아닌 경우 RabbitMQ를 선택했을 것입니다.</p><p>RabbitMQ를 선택하는 두 가지 주요 상황이 있습니다. 장기 실행 작업의 경우 안정적인 백그라운드 작업을 실행해야 할 때. 그리고 애플리케이션 내부 및 애플리케이션 간의 통신 및 통합을 위해, 즉 마이크로서비스 간의 중개자로서, 시스템은 웹샵에서의 주문 처리</p><p><code>RabbitMQ 사용 사례 - 장기 실행 작업</code><br>메시지 대기열은 비동기 처리를 가능하게 합니다. 즉, 즉시 처리하지 않고 대기열에 메시지를 넣을 수 있습니다. RabbitMQ는 장기 실행 작업에 이상적입니다.</p><p>ex : 사이트는 이 정보를 처리하고 PDF를 생성하여 사용자에게 다시 이메일로 보냅니다. 이 예제의 경우 작업을 완료하는 데 몇 초가 걸리며 이것이 메시지 큐를 사용하는 이유 중 하나입니다.</p><p>많은 고객이 RabbitMQ 대기열을 이벤트 버스로 사용하여 웹 서버가 그 자리에서 계산 집약적인 작업을 수행하는 대신 요청에 신속하게 응답할 수 있도록 합니다.</p><p><code>RabbitMQ 사용 사례 - 마이크로서비스 아키텍처의 중개자 </code><br>RabbitMQ는 또한 많은 고객이 마이크로서비스 아키텍처에 사용하며, 여기서 메시지 전달의 병목 현상을 방지하면서 애플리케이션 간의 통신 수단으로 사용됩니다.</p><p><code>Apache Kafka의 사용 사례</code><br>일반적으로 스트리밍 데이터를 저장, 읽기(다시 읽기), 분석하기 위한 프레임워크를 원하면 Apache Kafka를 사용합니다. 감사를 받는 시스템이나 메시지를 영구적으로 저장해야 하는 시스템에 이상적입니다. 또한 데이터 분석(추적, 수집, 로깅, 보안 등) 또는 실시간 처리를 위한 두 가지 주요 사용 사례로 나눌 수 있습니다.</p><p><code>Apache Kafka의 사용 사례 - 데이터 분석: 추적, 수집, 로깅, 보안</code><br>Kafka의 원래 사용 사례는 페이지 보기, 검색, 업로드 또는 사용자가 취할 수 있는 기타 작업을 포함한 웹사이트 활동을 추적하는 것이었습니다. 이러한 종류의 활동 추적에는 각 작업 및 각 사용자에 대해 메시지가 생성되기 때문에 매우 많은 양의 처리량이 필요한 경우가 많습니다. 이러한 활동 중 많은 부분(사실 모든 시스템 활동)은 Kafka에 저장하고 필요에 따라 처리할 수 있습니다.</p><p>Producer는 데이터를 한 곳으로 보내기만 하면 되고 백엔드 서비스 호스트는 필요에 따라 데이터를 사용할 수 있습니다. 주요 분석, 검색 및 저장 시스템은 Kafka와 통합됩니다.</p><p><code>Apache Kafka의 사용 사례 - 실시간 처리</code><br>Kafka는 처리량이 많은 분산 시스템 역할을 합니다. 소스 서비스는 데이터 스트림을 실시간으로 가져오는 대상 서비스로 푸시합니다.</p><p>Kafka는 적은 수의 소비자와 실시간으로 많은 생산자를 처리하는 시스템에서 사용할 수 있습니다. 즉, 주식 데이터를 모니터링하는 금융 IT 시스템.</p><p><code>정리</code><br>RabbitMQ<br>  What : RabbitMQ is a solid, mature, general purpose message broker<br>  주요용도: 응용 프로그램 간의 통신을 위한 메시지 Queue입니다. 장기 실행 작업 또는 안정적인 백그라운드 작업을 실행해야 하는 경우 사용됨.<br>  Persistence: acknowledgement 수신시 데이터 drop<br>  Replay: 안됨<br>  Routing: Consumer 노드에 정보를 반환할 수 있는 유연한 라우팅 지원<br>  Message Priority: 설정가능</p><p>Kafka<br>  What : Apache Kafka is a message bus optimized for high-ingress data streams and replay<br>  주요용도 : 스트리밍 데이터를 저장, 읽기(다시 읽기) 및 분석하기 위한 프레임워크입니다.<br>  Persistence :    보관 기간 이 지난 후 삭제할 수 있는 옵션에 따라 메시지를 유지합니다.<br>  Replay : 가능<br>  Routing : 유연한 라우팅을 지원하지 않으며 별도의 Topic을 통해 수행해야 합니다.<br>  Message Priority: 불가능</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;kafka와 rabbitMQ에 대해 좋은 비교글이 있어 정리해본다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudamqp.com/blog/when-to-use-rabbitmq-or-apache-kafka.html&quot;&gt;https://w
      
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/CS/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="Kafka" scheme="http://KKimSangHeon.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>소상공인 사업 활성화를 위한 프로젝트</title>
    <link href="http://KKimSangHeon.github.io/2022/06/11/closing-sale/"/>
    <id>http://KKimSangHeon.github.io/2022/06/11/closing-sale/</id>
    <published>2022-06-11T07:47:38.000Z</published>
    <updated>2022-06-11T16:49:24.079Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-개발배경"><a href="#1-개발배경" class="headerlink" title="1. 개발배경"></a>1. 개발배경</h3><p>소상공인의 사업 활성화를 위한 프로젝트를 진행하였으며 주 내용은 폐기 일자가 얼마 남지않은 음식을 특정 할인율을 적용해서 판매할 수 있도록 도와주는 플랫폼이다. 팀에서 인프라 구축, 서버 개발을 담당했던 프로젝트였다.</p><p>활용했던 항목들을 나열해 보자면 다음과 같다.</p><h5 id="Infra-amp-Middleware"><a href="#Infra-amp-Middleware" class="headerlink" title="Infra &amp; Middleware"></a>Infra &amp; Middleware</h5><p>Zipkin, EFK, Jenkins, K8S, AKHQ, ArgoCD, FCM, Slack, nginx ingress controller, kafka, postgres,</p><h5 id="Libs-amp-Framwork"><a href="#Libs-amp-Framwork" class="headerlink" title="Libs &amp; Framwork"></a>Libs &amp; Framwork</h5><p>Spring boot, Spring Security ,JWT, JPA, QueryDSL, H2, JUnit, JTS for geofencing, caffeine(Local Cache)<br>EFK, spring cloud config, bus, sleuth<br>Swagger, spring rest docs, Helm chart , Kustomize</p><h5 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h5><p>selenium, 공공데이터</p><h3 id="2-설계-및-구성"><a href="#2-설계-및-구성" class="headerlink" title="2. 설계 및 구성"></a>2. 설계 및 구성</h3><p>K8S 환경으로 구축하고자 minikube를 활용하였으며 상세 구성은 아래와 같다.<br>평소 궁금하고 언젠간 한번 훑어봐야지 했던 기술들을 한번씩 써본것같다.</p><p><img src="/2022/06/11/closing-sale/infra.png" alt="인프라 구성"><br><img src="/2022/06/11/closing-sale/dashboard.png" alt="Kuberneties dashboard"></p><h5 id="간단한-설명"><a href="#간단한-설명" class="headerlink" title="간단한 설명"></a>간단한 설명</h5><ul><li>Helm을 활용하여 필요 항목을 설치하였으며 Jenkins를 활용해 CI&#x2F;CD 환경을 구축하고 배포완료시 Slack로 noti를 보내도록 설정하였다.</li><li>공통 property 들은 spring-cloud-config를 활용하여 git에서 관리하도록 하였으며 actuator, spring-cloud-bus&#x2F;kafka 를 활용하여 property 수정시 자동으로 반영되도록 설정하였다.</li><li>회원가입의 경우 spring-security 를 활용하여 kakao로그인이 가능하도록 구현하였다.</li></ul><h3 id="3-배포관리"><a href="#3-배포관리" class="headerlink" title="3. 배포관리"></a>3. 배포관리</h3><p><img src="/2022/06/11/closing-sale/Jenkins.png" alt="Jenkins pipline"><br><img src="/2022/06/11/closing-sale/argocd.png" alt="ArgoCD"><br>또한 Jenkins, ArgoCD를 활용하여 CI&#x2F;CD, GitOps환경을 구축하였고 배포과정은 다음과 같다.</p><h5 id="배포-flow"><a href="#배포-flow" class="headerlink" title="배포 flow"></a>배포 flow</h5><ul><li>소스코드 커밋시 git에서 설정해둔 webhook으로 인해 jenkins로 http 요청을 보낸다.</li><li>jenkins는 소스코드를 clone하고 테스트 코드를 실행 &#x2F; 빌드 후 이미지를 버전정보와 함께 docker hub로 push한다. 성공시 slack메세지 전송</li><li>deployment.yaml이 위치한 별도 git repository에 Kustomize를 활용하여 docker hub에 반영된 이미지와 동일한 버전으로 수정 후 push 한다.  </li><li>deployment.yaml파일의 변경을 인지한 argoCD가 서버에 동기화한다.</li></ul><p><img src="/2022/06/11/closing-sale/slack.jpg" alt="빌드완료 후 Slack 메세지 수신"></p><h3 id="4-모듈구성"><a href="#4-모듈구성" class="headerlink" title="4. 모듈구성"></a>4. 모듈구성</h3><p>어플리케이션 서버는 세 모듈로 나눠 개발하였다.</p><p><code>Oauth Server</code><br>kakao와 연동하여 로그인 성공시 jwt토큰을 전달해준다.</p><p><code>API Server</code> :<br>Manager, Customer API가 존재하며 각 권한을 갖고있는 클라이언트만 api를 호출할 수 있다.<br>3개의 pod로 구성되어있으며 내장톰캣을 활용하여 동작한다.<br>주문&#x2F;상품 등록시 client에게 알리기 위해 kafka에 데이터를 생성한다.</p><p><code>Push Server</code> :<br>주문&#x2F;상품 등록시 API Server가 생성한 데이터를 kafka로 부터 읽어들여 client에게 전송하기 위해 fcm으로 메세지를 전송한다.<br>Order, Stock 의 파티션을 두개로 구성하여 2개의 pod로 설정하였다.</p><h3 id="5-Geofencing"><a href="#5-Geofencing" class="headerlink" title="5. Geofencing"></a>5. Geofencing</h3><p>구 별로 음식점 데이터를 캐싱해놓은 후 음식점 조회 api가 들어오면 JTS를 활용해 특정 n meter 이내 위치한 음식점 정보를 추출할 수 있었다.<br>음식점 데이터 조회 api는 quadtree라는 data struct를 활용하여 reponse시간을 최소화 할 수 있었다.</p><p>참고: <a href="https://www.smartycoder.com/2021/04/what-is-quadtree-example-usage-in-java-jts.html">https://www.smartycoder.com/2021/04/what-is-quadtree-example-usage-in-java-jts.html</a></p><h3 id="6-Opentracing"><a href="#6-Opentracing" class="headerlink" title="6. Opentracing"></a>6. Opentracing</h3><p>Opentracing을 위해 서버에 zipkin을 설치하였고 EFK환경을 구축하여 Fluentd를 daemonset으로 구성하였다.<br>Fluentd는 pod에서 생성해내는 로그를 ElasticSearch로 보내고 kibana를 활용하여 이를 확인하였다.<br>또한 각 pod는 traceId, spanId를 만들어 zipkin 서버로 보내 확인할 수 있도록 하였다.</p><p><img src="/2022/06/11/closing-sale/zipkin.png" alt="zipkin"></p><h3 id="7-데이터-수집"><a href="#7-데이터-수집" class="headerlink" title="7.데이터 수집"></a>7.데이터 수집</h3><p>초기 데이터를 구성하기 위해 음식점, 메뉴데이터가 필요했다.</p><p>음식점 데이터의 경우 공공데이터 포털에서 서울시 소상공인시장진흥공단_상가(상권)정보 를 csv 로 다운로드 후 파싱하여 db에 insert 하였다.<br>참고 : <a href="https://www.data.go.kr/data/15083033/fileData.do">https://www.data.go.kr/data/15083033/fileData.do</a></p><p>메뉴 데이터는 selenium을 활용하여 kakao map에서 메뉴데이터를 검색 후 스크래핑 소스를 작성하고 db에 insert 하도록 설정하였다.</p><h3 id="8-협업"><a href="#8-협업" class="headerlink" title="8.협업"></a>8.협업</h3><p>app&#x2F;web 개발자와 협업하기 위해 swagger, spring rest docs를 활용하였다.<br><img src="/2022/06/11/closing-sale/swagger.png" alt="swagger"></p><p><img src="/2022/06/11/closing-sale/restdocs.png" alt="docs"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-개발배경&quot;&gt;&lt;a href=&quot;#1-개발배경&quot; class=&quot;headerlink&quot; title=&quot;1. 개발배경&quot;&gt;&lt;/a&gt;1. 개발배경&lt;/h3&gt;&lt;p&gt;소상공인의 사업 활성화를 위한 프로젝트를 진행하였으며 주 내용은 폐기 일자가 얼마 남지않은 음
      
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="My Projects" scheme="http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"/>
    
    
      <category term="MSA" scheme="http://KKimSangHeon.github.io/tags/MSA/"/>
    
      <category term="Spring boot" scheme="http://KKimSangHeon.github.io/tags/Spring-boot/"/>
    
      <category term="k8s" scheme="http://KKimSangHeon.github.io/tags/k8s/"/>
    
      <category term="jenkins" scheme="http://KKimSangHeon.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>junit 활용예시</title>
    <link href="http://KKimSangHeon.github.io/2022/04/11/tdd3/"/>
    <id>http://KKimSangHeon.github.io/2022/04/11/tdd3/</id>
    <published>2022-04-10T17:30:40.000Z</published>
    <updated>2022-04-10T17:35:32.880Z</updated>
    
    <content type="html"><![CDATA[<p>junit 및 Mockito 활용예시를 정리해보았다.<br>자주 사용하는것들을 참고하기 위해..</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.assertj.core.api.Assertions.assertThat;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest</span> &#123;</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">()</span> &#123;</span><br><span class="line"> String[] values = <span class="string">&quot;1&quot;</span>.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"> assertThat(values).contains(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"> values = <span class="string">&quot;1,2&quot;</span>.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"> assertThat(values).containsExactly(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">substring</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;(1,2)&quot;</span>;</span><br><span class="line"> <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> input.substring(<span class="number">1</span>, input.length() - <span class="number">1</span>);</span><br><span class="line"> assertThat(result).isEqualTo(<span class="string">&quot;1,2&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">arrayList</span><span class="params">()</span> &#123;</span><br><span class="line"> ArrayList&lt;String&gt; values = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"> values.add(<span class="string">&quot;first&quot;</span>);</span><br><span class="line"> values.add(<span class="string">&quot;second&quot;</span>);</span><br><span class="line"> assertThat(values.add(<span class="string">&quot;third&quot;</span>)).isTrue();</span><br><span class="line"> assertThat(values.size()).isEqualTo(<span class="number">3</span>);</span><br><span class="line"> assertThat(values.get(<span class="number">0</span>)).isEqualTo(<span class="string">&quot;first&quot;</span>);</span><br><span class="line"> assertThat(values.contains(<span class="string">&quot;first&quot;</span>)).isTrue();</span><br><span class="line"> assertThat(values.remove(<span class="number">0</span>)).isEqualTo(<span class="string">&quot;first&quot;</span>);</span><br><span class="line"> assertThat(values.size()).isEqualTo(<span class="number">2</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span> &#123;</span><br><span class="line">    Calculator cal;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>  &#123;</span><br><span class="line">        cal = <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 덧셈()  &#123;</span><br><span class="line">        assertEquals(<span class="number">7</span>, cal.add(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 뺄셈()  &#123;</span><br><span class="line">        assertEquals(<span class="number">1</span>, cal.subtract(<span class="number">5</span>,  <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 곱셉()  &#123;</span><br><span class="line">        assertEquals(<span class="number">6</span>, cal.multiply(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 나눗셈()  &#123;</span><br><span class="line">        assertEquals(<span class="number">2</span>, cal.divide(<span class="number">8</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">        cal = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.assertj.core.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">replace</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">actual</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>.replace(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">        assertThat(actual).isEqualTo(<span class="string">&quot;adc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">containsTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;1,2&quot;</span>;</span><br><span class="line">        String[] spitedData = data.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">        assertThat(spitedData).contains(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">equalTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        String[] spitedData = data.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        assertThat(spitedData).containsExactly(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DisplayName(&quot;Exception Test&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">charAtTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">arg</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="comment">//        assertThatExceptionOfType(StringIndexOutOfBoundsException.class).isThrownBy(()-&gt;&#123;</span></span><br><span class="line"><span class="comment">//            arg.charAt(5);</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line">        assertThatThrownBy(()-&gt; &#123;</span><br><span class="line">            arg.charAt(<span class="number">5</span>);</span><br><span class="line">        &#125;).isInstanceOf(StringIndexOutOfBoundsException.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.assertj.core.api.Assertions.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertTrue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.CsvSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.ValueSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Integer&gt; numbers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        numbers = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        numbers.add(<span class="number">1</span>);</span><br><span class="line">        numbers.add(<span class="number">1</span>);</span><br><span class="line">        numbers.add(<span class="number">2</span>);</span><br><span class="line">        numbers.add(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sizeTest</span><span class="params">()</span> &#123;</span><br><span class="line">        assertThat(numbers.size()).isEqualTo(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@ValueSource(ints = &#123;1, 2, 3&#125;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        assertTrue(numbers.contains(num));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@CsvSource(value = &#123;&quot;1:true&quot;, &quot;2:true&quot;,&quot;4:false&quot;&#125;, delimiter = &#x27;:&#x27;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">containsTest2</span><span class="params">(<span class="type">int</span> num, <span class="type">boolean</span> res)</span> &#123;</span><br><span class="line">        assertThat(numbers.contains(num)).isEqualTo(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;junit 및 Mockito 활용예시를 정리해보았다.&lt;br&gt;자주 사용하는것들을 참고하기 위해..&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>TDD 학습내용 정리</title>
    <link href="http://KKimSangHeon.github.io/2022/04/11/tdd2/"/>
    <id>http://KKimSangHeon.github.io/2022/04/11/tdd2/</id>
    <published>2022-04-10T17:26:05.000Z</published>
    <updated>2022-04-10T17:43:29.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h3><p>테스트로부터 시작하는 개발 방식</p><ul><li>(실패하는) 테스트 코드 작성</li><li>테스트를 통과시킬만큼 구현</li><li>코드정리</li></ul><p>테스트코드는 given when then으로 구성됨</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">confirmMember</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 상황: 대기 상태 회원이 존재</span></span><br><span class="line">memoryMemberRepository.save(Member.id(“id”).status(WAITING).builder().build());</span><br><span class="line"><span class="comment">// 실행: 회원을 승인하면</span></span><br><span class="line">confirmMemberService.confirm(“id”);</span><br><span class="line"><span class="comment">// 결과: 회원이 활성 상태가 됨</span></span><br><span class="line"><span class="type">Member</span> <span class="variable">m</span> <span class="operator">=</span> memoryMemberRepository.findById(“id”);</span><br><span class="line">assertThat(m.getStatus()).isEqualTo(ACTIVE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>외부 상태에 의존하는경우 대역을 사용한다.<br>(ex. 외부서버에 붙거나, 내가 붙기힘든것들..)</p><h3 id="대역-double-라고-함"><a href="#대역-double-라고-함" class="headerlink" title="대역(double 라고 함)"></a>대역(double 라고 함)</h3><p>대체구현은 대역을 이요해서 테스트에 필요한 상황&#x2F;결과를 구성</p><p>대역의 종류<br><code>스텁 (stub)</code> -  구현을 최대한 단순한 것으로 대체<br>    result를 미리 세팅해놓고 활용</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefundAccountRegisterTest</span> &#123;</span><br><span class="line"><span class="keyword">private</span> RefundAccountRegister register;</span><br><span class="line"><span class="keyword">private</span> <span class="type">StubAccountValidator</span> <span class="variable">stuValidator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StubAccountValidator</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">  register = <span class="keyword">new</span> <span class="title class_">RefundAccountRegister</span>(stuValidator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">invalidAccount</span><span class="params">()</span> &#123;</span><br><span class="line">  stuValidator.setResult(AccountValidity.INVALID);</span><br><span class="line">  assertThatThrownBy(() -&gt;</span><br><span class="line">    register.registerRefundAccount(“<span class="number">12345</span>”, “name”, “loginId”))</span><br><span class="line">  .isInstanceOf(InvalidAccountException.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>가짜 (fake)</code> -  기능을 구현해서 진짜와 유사 하게 동작 (경량 버전)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryMemberRepository</span> <span class="keyword">implements</span> <span class="title class_">MemberRepository</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String,Member&gt; members = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Member <span class="title function_">findById</span><span class="params">(String id)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> members.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Member member)</span> &#123;</span><br><span class="line">      member.put(member.getId(), member);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>스파이(spy)</code> - 호출된 내역을 기록하여 활용</p><p><code>모의(mock)</code> 객체 - 기대한대로 상호작용하는지 행위를 검증(보통 모의 객체는 스텁과 스파이 가능)<br>모의객체는 가짜를 빼고 다 활용가능한 다재다능한 아이임<br>주로 모의객체를 만들고 스텁과 스파이, 모의객체 그 자체로 그때그때 상황에 맞게 활용한다.<br>모의객체는 상호작용이 원활히 이뤄지는지 검증하는데 활용함</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoDebitRegisterTest</span> &#123;</span><br><span class="line"><span class="keyword">private</span> AutoDebitRegister register;</span><br><span class="line"><span class="keyword">private</span> <span class="type">CardNumberValidator</span> <span class="variable">cardNumberValidator</span> <span class="operator">=</span> mock(CardNumberValidator.class);</span><br><span class="line"><span class="keyword">private</span> <span class="type">AutoDebitInfoRepository</span> <span class="variable">repository</span> <span class="operator">=</span> mock(AutoDebitInfoRepository.class);</span><br><span class="line">  <span class="meta">@BeforeEach</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">    register = <span class="keyword">new</span> <span class="title class_">AutoDebitRegister</span>(cardNumberValidator, repository);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">validCard_Then_Info_Saved</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//스텁처럼 쓰여짐.</span></span><br><span class="line">    given(cardNumberValidator.validate(anyString())).willReturn(CardValidity.VALID);</span><br><span class="line"></span><br><span class="line">    <span class="type">AutoDebitReq</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoDebitReq</span>(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;1234123412341234&quot;</span>);</span><br><span class="line">    <span class="type">RegisterResult</span> <span class="variable">result</span> <span class="operator">=</span> register.register(req);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//repository의 save가 되는지 검증</span></span><br><span class="line">    then(repository).should().save(Mockito.any());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="대역을-사용할-경우-장점"><a href="#대역을-사용할-경우-장점" class="headerlink" title="대역을 사용할 경우 장점"></a>대역을 사용할 경우 장점</h4><p>1.의존 대상의 진짜 구현없이 테스트 가능<br>현재 구현 대상에 집중, 병행 개발 가능<br>의존 대상에 대한 상황 지정을 가능 하게함<br>의존 대상 에 대한 결과를 확인할 수 있게 함</p><p>2.개발속도 향상<br>서버 구동 없이 상당한 기능 검증 가능<br>외부 시스템 연동 없이 주요 로직 검증 가능 등등</p><p>상황이나 결과를 만들어낼 수 있다.</p><h3 id="예외적인-경우를-먼저-테스트해라"><a href="#예외적인-경우를-먼저-테스트해라" class="headerlink" title="예외적인 경우를 먼저 테스트해라."></a>예외적인 경우를 먼저 테스트해라.</h3><p>예외적인 경우는 코드 구조에 영향을 주고, 예외적인 경우를 나중에 하게 될 경우 코드가 복잡해질 수 있음.</p><p>정상적인 경우 보다 예외적인 경우에 대해 먼저 작성하라</p><p>회원가입 예 : 같은ID회원이 존재하는경우 &#x2F; 같은 ID 회원이 없는경우 (전자 먼저 작성)<br>주문취소 예 : 주문이 이미 취소된 경우 &#x2F; 주문이 취소 가능한 경우(전자 먼저 작성)</p><h3 id="작은단계로-진행-즉-점진적으로-하라"><a href="#작은단계로-진행-즉-점진적으로-하라" class="headerlink" title="작은단계로 진행. 즉 점진적으로 하라"></a>작은단계로 진행. 즉 점진적으로 하라</h3><p>상수 리턴<br>값 비교<br>구현 일반화</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordStrengthMeter</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> PasswordStrength <span class="title function_">meter</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;ab12!@A&quot;</span>.equals(s))</span><br><span class="line">      <span class="keyword">return</span> PasswordStrength.NORMAL;</span><br><span class="line">    <span class="keyword">return</span> PasswordStrength.STRONG;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordStrengthMeter</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> PasswordStrength <span class="title function_">meter</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;ab12!@A&quot;</span>.equals(s) || <span class="string">&quot;Ab12!c&quot;</span>.equals(s))</span><br><span class="line">      <span class="keyword">return</span> PasswordStrength.NORMAL;</span><br><span class="line">    <span class="keyword">return</span> PasswordStrength.STRONG;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordStrengthMeter</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> PasswordStrength <span class="title function_">meter</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length() &lt; <span class="number">8</span>)</span><br><span class="line">      <span class="keyword">return</span> PasswordStrength.NORMAL;</span><br><span class="line">    <span class="keyword">return</span> PasswordStrength.STRONG;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="대역-도출시점"><a href="#대역-도출시점" class="headerlink" title="대역 도출시점"></a>대역 도출시점</h3><p>1.테스트 상황을 만드려할 때 (given)</p><p>2.결과를 확인해야 하는데 테스트 대상으로 확인할 수 없을 때</p><p>3.기능을 구현하는 과정에서</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sameIdExists</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">//동일 ID가 존재하는 상황 필요!</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    svc.register(<span class="keyword">new</span> <span class="title class_">RegistReq</span>(<span class="string">&quot;id&quot;</span>, …));</span><br><span class="line">    fail();</span><br><span class="line">  &#125; <span class="keyword">catch</span>(DupIdEx ex) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sameIdExists</span><span class="params">()</span> &#123;</span><br><span class="line">  memoryRepo.save(<span class="keyword">new</span> <span class="title class_">Member</span>(<span class="string">&quot;id&quot;</span>, …));</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    svc.register(<span class="keyword">new</span> <span class="title class_">RegistReq</span>(<span class="string">&quot;id&quot;</span>, …));</span><br><span class="line">    fail();</span><br><span class="line">  &#125; <span class="keyword">catch</span>(DupIdEx ex) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">noSameIdExists</span><span class="params">()</span> &#123;</span><br><span class="line">  svc.register(<span class="keyword">new</span> <span class="title class_">RegistReq</span>(<span class="string">&quot;id&quot;</span>, …));</span><br><span class="line">  <span class="comment">//회원 데이터 생성 확인 필요</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">noSameIdExists</span><span class="params">()</span> &#123;</span><br><span class="line">  svc.register(<span class="keyword">new</span> <span class="title class_">RegistReq</span>(<span class="string">&quot;id&quot;</span>, …));</span><br><span class="line">  <span class="type">Member</span> <span class="variable">m</span> <span class="operator">=</span> memoryRepo.findById(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">  assertEquals(<span class="string">&quot;id&quot;</span>, m.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TDD 효과<br>테스트 코드가 쌓이면 디버깅 시간 감소<br>테스트 코드가 있으면 문제 범위를 좁혀서 디버깅하는게 수월</p><p>테스트 코드가 쌓이면 코드 변경에 따른 영향 범위 확인 가능<br>코드를 수정했는데 실패하는 테스트가 발생하면 문제를 빨리 알 수 있음 (회귀테스트)</p><p>코드 구조&#x2F;설계가 좋아질 가능성이 높아짐<br>테스트가 가능하려면 의존 대상을 대역으로 교체할 수 있어야함<br>대역으로 교체할 수 있는 구조는 그 만큼 역할별로 분리되어 있을 가능성이 높음</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TDD&quot;&gt;&lt;a href=&quot;#TDD&quot; class=&quot;headerlink&quot; title=&quot;TDD&quot;&gt;&lt;/a&gt;TDD&lt;/h3&gt;&lt;p&gt;테스트로부터 시작하는 개발 방식&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(실패하는) 테스트 코드 작성&lt;/li&gt;
&lt;li&gt;테스트를 통과시킬
      
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>TDD, 클린코드 학습내용 정리</title>
    <link href="http://KKimSangHeon.github.io/2022/04/11/tdd/"/>
    <id>http://KKimSangHeon.github.io/2022/04/11/tdd/</id>
    <published>2022-04-10T17:25:57.000Z</published>
    <updated>2022-04-10T17:44:35.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h3><p>TDD와 단위테스트는 다름.<br>TDD: 테스트 먼저 짜고 프로덕션 코드를 구현하는것.</p><h4 id="시작전-To-do-리스트를-작성"><a href="#시작전-To-do-리스트를-작성" class="headerlink" title="시작전 To do 리스트를 작성."></a>시작전 To do 리스트를 작성.</h4><p>to do 리스트는 언제든지 프로젝트를 진행해나가면서 변경될 수 있다.</p><h3 id="최초-실패하는-코드를-작성"><a href="#최초-실패하는-코드를-작성" class="headerlink" title="최초 실패하는 코드를 작성"></a>최초 실패하는 코드를 작성</h3><p>그 후 프로덕션 코드를 고쳐 테스트를 통과하도록 해라</p><h3 id="테스트에서-먼저-이뤄지라"><a href="#테스트에서-먼저-이뤄지라" class="headerlink" title="테스트에서 먼저 이뤄지라"></a>테스트에서 먼저 이뤄지라</h3><p>테스트코드에서부터 프로덕트 코드를 만들어 나가는것에 익숙해져야함.<br>실제로 없는 함수를 테스트 코드에서 호출하고 이 후 프로덕션에서 만든다.</p><h3 id="메세지를-던지자"><a href="#메세지를-던지자" class="headerlink" title="메세지를 던지자"></a>메세지를 던지자</h3><p>ball.getNothing() &#x3D;&#x3D; 0 을 ball.isNotingng() 로 하듯이..</p><h3 id="Random-값을-테스트"><a href="#Random-값을-테스트" class="headerlink" title="Random 값을 테스트"></a>Random 값을 테스트</h3><p>객체관계가</p><p>RacingMain -&gt; RacingGame -&gt; Car 라고 하자.</p><p>Car 내부에 move라는 함수가 있는데 이는 random 값을 기반으로 도는 함수라 테스트하기가 쉽지않다. Car move안에 random으로 동작하는 부분으로 인해 RacingGame, RacingMain 또한 테스트하기가 쉽지않아짐.<br>random 생성하는 부분을 RacingMain으로 올리면 RacingGame, Car는 테스트가 가능해진다.</p><p>원래 최 상위 RacingMain 같은 부분은 테스트하기가 쉽지 않은 부분이긴 함.</p><p>랜덤값에 의존하는 레거시코드를 못바꿀 때 테스트하는 방법.<br>사진 참고(private였던 getRandom을 protected로 바꾸고 getRandom을 오버라이딩해서 테스트 진행)</p><p>테스트는 경계값으로 테스트한느것이 좋다.</p><p>move 작동방식이 계속변경된다면 해당메소드를 인터페이스로 뽑아내는것도 좋은방법임.</p><p>게터&#x2F;세터는 되도록 쓰지마라(dto 제외)<br>객체와 객체를 비교하는것이 객체지향적인 사고이다.<br>equals를 만들어줘야하겠지?</p><p>기본형 타입에 대해서도 일급객체를 만들어서 써라.<br>int position이 아닌 Postion postion으로 해서<br>position++; 보단 postion.increase(); &#x2F;&#x2F;메세지를 전달</p><h3 id="CQRS"><a href="#CQRS" class="headerlink" title="CQRS"></a>CQRS</h3><p>CQRS는 Command and Query Responsibility Segregation(명령과 조회의 책임 분리)을 나타냅니다. 이름처럼 시스템에서 명령을 처리하는 책임과 조회를 처리하는 책임을 분리하는 것이 CQRS의 핵심입니다. 이제 명령과 조회에 대해 정의할 필요가 있습니다. CQRS에서 명령은 시스템의 상태를 변경하는 작업을 의미하며 조회는 시스템의 상태를 반환하는 작업을 의미합니다. 정리하면, CQRS는 시스템의 상태를 변경하는 작업과 시스템의 상태를 반환하는 작업의 책임을 분리하는 것입니다.</p><p>상수 값의 경우 static final, 변수 이름은 대문자<br>private static int RANGE &#x3D; 9;<br>private final int MIN_COUNT &#x3D; 1;</p><p>상수의 위치는? 상수, 클래스 변수, 인스턴스 변수, 생성자 순으로 위치한다</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Car &#123;</span><br><span class="line">private int moveIndex;</span><br><span class="line">private int carNumber;</span><br><span class="line">private String carName;</span><br><span class="line">private static final int INIT_POSITION = 0;</span><br><span class="line">private static int autoIncrease = 0;</span><br><span class="line">[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>공백 라인을 의미있게 사용해라. 문맥을 분리하는 부분에 사용한다.<br>리팩토링의 단위가 될 수 있따.</p><p>space도 고려한다</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (int i=10; i&lt;1000; i++) &#123;</span><br><span class="line">assertTrue(checkMove(2, i));</span><br><span class="line">assertTrue(checkMove(20, i));</span><br><span class="line">assertTrue(checkMove(200, i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>equals, hashcode는 맨아래 놓는게 관례임</p><h3 id="이름은-가능한-구체적이어야-한다-모호하거나-하나-이상의-목적으로-사용될-수-있는-일반적인-이름은보통-나쁜-이름이다"><a href="#이름은-가능한-구체적이어야-한다-모호하거나-하나-이상의-목적으로-사용될-수-있는-일반적인-이름은보통-나쁜-이름이다" class="headerlink" title="이름은 가능한 구체적이어야 한다. 모호하거나 하나 이상의 목적으로 사용될 수 있는 일반적인 이름은보통 나쁜 이름이다"></a>이름은 가능한 구체적이어야 한다. 모호하거나 하나 이상의 목적으로 사용될 수 있는 일반적인 이름은보통 나쁜 이름이다</h3><p>적당한 이름<br>numTeamMembers, teamMemberCount<br>numSeatsInStadium, seatCount<br>teamPointsMax, pointsRecord</p><h3 id="Total-Sub-Average-Max-Min-Record-String-Pointer-등의-한정자를-사용해야-한다면-이름의-끝이-이런-수정자를-입력하는-것이-좋다"><a href="#Total-Sub-Average-Max-Min-Record-String-Pointer-등의-한정자를-사용해야-한다면-이름의-끝이-이런-수정자를-입력하는-것이-좋다" class="headerlink" title="Total, Sub, Average, Max, Min, Record, String, Pointer 등의 한정자를 사용해야 한다면, 이름의 끝이 이런 수정자를 입력하는 것이 좋다"></a>Total, Sub, Average, Max, Min, Record, String, Pointer 등의 한정자를 사용해야 한다면, 이름의 끝이 이런 수정자를 입력하는 것이 좋다</h3><p>좋은 예<br>revenueTotal<br>expenseTotal<br>revenueAverage<br>expenseAverage</p><h3 id="클린코드-가이드함수-메소드"><a href="#클린코드-가이드함수-메소드" class="headerlink" title="클린코드 가이드함수(메소드)"></a>클린코드 가이드함수(메소드)</h3><p>-작게 만들어라.<br>함수를 만드는 첫 번재 규칙은 ‘작게’다. 함수를 만드는 두 번째 규칙은 ‘더 작게’다.</p><p>-한 가지만 해라.<br>함수는 한 가지를 해야 한다. 그 한 가지를 잘 해야 한다. 그 한 가지만 해야 한다.</p><p>-함수 당 추상화 수준은 하나로<br>함수가 확실히 ‘한 가지’ 작업만 하려면 함수 내 모든 문장이 동일한 추상화 수준에 있어야 한다.<br>코드는 위에서 아래로 이야기처럼 일해야 좋다.</p><p>-서술적인 이름을 사용하라<br>이름이 길어도 괜찮다.<br>이름을 정하느라 시간을 들여도 괜찮다.<br>이름을 붙일 때는 일관성이 있어야 한다.</p><p>-함수 인수<br>함수에서 이상적인 인수 개수는 0개(무항)이다. 다음은 1개이고, 다음은 2개이다.<br>3개는 가능한 피하는 편이 좋다.<br>4개 이상은 특별한 이유가 있어도 사용하면 안된다<br>인수가 2 ~ 3개 필요한 경우가 생긴다면 인수를 독자적인 클래스를 생성할 수 있는지 검토해 본다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Circle makeCircle(double x, double y, double radius);</span><br><span class="line">Circle makeCircle(Point center, double radius);</span><br></pre></td></tr></table></figure><p>-side effect를 만들지 마라.<br>side effect는 많은 경우 예상치 못한 버그를 발생시킨다.<br>명령과 조회를 분리하라.<br>함수는 뭔가를 수행하거나 답하거나 둘 중 하나만 해야 한다. 둘 다 하면 안된다.<br>개체 상태를 변경하거나 아니면 개체 정보를 반환하거나 둘 중 하나다.<br>-오류 코드보다 예외를 사용하라.<br>오류 처리도 한 가지 작업이다.<br>함수는 ‘한 가지’ 작업만 해야 한다. 오류 처리도 ‘한 가지’ 작업에 속한다.<br>그러므로 오류를 처리하는 함수는 오류만 처리해야 마땅하다.<br>try&#x2F;catch 블록은 원래가 추하다. 코드 구조에 혼란을 일으키며, 정상적인 동작과 오류 처리 동작을 뒤섞는다. try&#x2F;catch 블록을 별도 함수로 뽑아내는 편이 낫다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void delete(Page page) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        deletePageAndAllReferences(page);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        logError(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="인스턴스-변수의-수를-최소화한다"><a href="#인스턴스-변수의-수를-최소화한다" class="headerlink" title="인스턴스 변수의 수를 최소화한다."></a>인스턴스 변수의 수를 최소화한다.</h3><p>인스턴스 변수의 수를 최소화할 수 있는 방법을 찾는다.<br>인스턴스 변수에 중복이 있는지를 확인하고 제거할 수 있는 방법을 찾는다<br>인스턴스 변수는 2개가 적절<br>아래 코드에서 winners는 cars에서 추출하는것으로서 중복으로 봐도 무방함.<br>cars가 변경되면 winners도 변경되어야 하는데 이는 버그유발 가능성을 높이는것.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class RacingGame &#123;</span><br><span class="line">private List&lt;Car&gt; cars;</span><br><span class="line">private List&lt;String&gt; winners;</span><br><span class="line">public List&lt;Car&gt; move(int time) &#123;</span><br><span class="line">int curCountOfWin = 0;</span><br><span class="line">for(Car car : cars)&#123;</span><br><span class="line">countOfMove(time, car);</span><br><span class="line">curCountOfWin = max(car.getCarPosition(), curCountOfWin);</span><br><span class="line">&#125;</span><br><span class="line">for(Car car : cars)&#123;</span><br><span class="line">setWinners(curCountOfWin, car);</span><br><span class="line">&#125;</span><br><span class="line">return cars;</span><br><span class="line">&#125;</span><br><span class="line">[...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setter-geeter를-최대한-지양하라-dto는-써도-됨"><a href="#setter-geeter를-최대한-지양하라-dto는-써도-됨" class="headerlink" title="setter, geeter를 최대한 지양하라(dto는 써도 됨)"></a>setter, geeter를 최대한 지양하라(dto는 써도 됨)</h3><p>car.setPosition(car.getPosition)) 대신 car.increase()<br>전자는 c언어의 구조체처럼 car을 쓰는것임<br>즉 car로 메세지를 보내라!<br>인스턴스를 초기화한 후에 값을 변경할 수 있는 setter 메소드를 생성하지 않는다. 가능하면 생성자를 사용해 초기화한다.<br>상태 데이터를 get하지 말고 메시지를 보내라<br>객체의 데이터를 꺼내 로직을 구현하면 중복 코드가 발생한다.<br>객체에 메시지를 보내 상태 데이터를 가지는 객체가 일하도록 하라.<br>private void addMaxCarPostion(GameResult result, int maxCarPosition, Car car) {<br>    if(maxCarPosition &#x3D;&#x3D; car.getCarPostion()) {<br>        result.addWinner(car);<br>    }<br>}</p><h3 id="좋은-이름-짓기-위한-연습-방법"><a href="#좋은-이름-짓기-위한-연습-방법" class="headerlink" title="좋은 이름 짓기 위한 연습 방법"></a>좋은 이름 짓기 위한 연습 방법</h3><p>JDK, Spring 프레임워크와 같이 유명한 오픈소스 코드를 많이 읽는다.<br>동의어, 유사어 사전을 활용해 문맥에 맞는 이름을 찾으려 노력한다.<br>구현하는 프로그래밍 도메인에 대한 지식을 쌓기 위해 노력한다. 도메인 지식을 높아질 수록 좋은 이름을 지을 가능성이 높아진다</p><h3 id="비지니스-로직과-UI-로직의-분리"><a href="#비지니스-로직과-UI-로직의-분리" class="headerlink" title="비지니스 로직과 UI 로직의 분리"></a>비지니스 로직과 UI 로직의 분리</h3><p>비지니스 로직과 UI 로직을 한 클래스가 담당하지 않도록 한다.<br>단일 책임의 원칙에도 위배된다</p><h3 id="어느-부분을-테스트할-것인가"><a href="#어느-부분을-테스트할-것인가" class="headerlink" title="어느 부분을 테스트할 것인가?"></a>어느 부분을 테스트할 것인가?</h3><p>어느 정도의 테스트가 적정한가? 너무많이는 필요없다, 필요한것만!<br>경계 값을 기준으로 테스트</p><h3 id="Test-Fixture-생성"><a href="#Test-Fixture-생성" class="headerlink" title="Test Fixture 생성"></a>Test Fixture 생성</h3><p>Fixture란 테스트를 실행하기 위해 필요한 것으로 테스트를 실행하기 위해 준비해야할 것들을 의미한다.<br>테스트의 인스턴스 변수는 각 Test Case에서 공통으로 필요한 Fixture만 위치, 나머지는 각 TestCase에 로컬 변수로 구현한다.<br>@BeforeEach는 각 Test Case에서 중복으로 사용하는 Fixture만 초기화해야 한다</p><h3 id="테스트를-위해-생성자를-추가하는것도-괜찮다"><a href="#테스트를-위해-생성자를-추가하는것도-괜찮다" class="headerlink" title="테스트를 위해 생성자를 추가하는것도 괜찮다."></a>테스트를 위해 생성자를 추가하는것도 괜찮다.</h3><p>우승자 구하는 로직을 테스트하기 위해 Test Fixture 준비</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class RacingGameResultTest &#123;</span><br><span class="line">@Test</span><br><span class="line">public void check_ranking_if_correct() &#123;</span><br><span class="line">List&lt;Car&gt; cars = new ArrayList&lt;&gt;();</span><br><span class="line">Car car1 = new Car(&quot;pobi&quot;);</span><br><span class="line">Car car2 = new Car(&quot;crong&quot;);</span><br><span class="line">Car car3 = new Car(&quot;honux&quot;);</span><br><span class="line">car1.move();</span><br><span class="line">car1.move();</span><br><span class="line">car2.move();</span><br><span class="line">car2.move();</span><br><span class="line">car2.move();</span><br><span class="line">car3.move();</span><br><span class="line">cars.add(car1);</span><br><span class="line">cars.add(car2);</span><br><span class="line">cars.add(car3);</span><br><span class="line">[...]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test Fixture를 위해 Car(String name, int position) 생성자를 추가한다면</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class RacingGameResultTest &#123;</span><br><span class="line">@Test</span><br><span class="line">public void check_ranking_if_correct() &#123;</span><br><span class="line">List&lt;Car&gt; cars = Arrays.asList(new Car(&quot;pobi&quot;, 2), new Car(&quot;crong&quot;, 3), new Car(&quot;honux&quot;, 1));</span><br><span class="line">[...]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MVC-기반으로"><a href="#MVC-기반으로" class="headerlink" title="MVC 기반으로"></a>MVC 기반으로</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class RacingMain &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String carNames = InputView.getCarNames();</span><br><span class="line">int tryNo = InputView.getTryNo();</span><br><span class="line">RacingGame racingGame = new RacingGame(carNames, tryNo);</span><br><span class="line">while(!racingGame.isEnd()) &#123;</span><br><span class="line">racingGame.race();</span><br><span class="line">ResultView.printCars(racingGame.getCars());</span><br><span class="line">&#125;</span><br><span class="line">ResultView.printWinners(racingGame.getWinners());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="자료-전달-객체-dto"><a href="#자료-전달-객체-dto" class="headerlink" title="자료 전달 객체 -dto"></a>자료 전달 객체 -dto</h3><p>자료 구조체의 전형적인 형태는 공개 변수만 있고 함수가 없는 클래스다. 이런 자료 구조체를 Data Transfer Object(DTO)라고 한다.<br>자바에서 DTO의 일반적인 형태는 ‘자바 빈(java bean)’ 구조다.</p><h3 id="클래스는-작아야-한다"><a href="#클래스는-작아야-한다" class="headerlink" title="클래스는 작아야 한다."></a>클래스는 작아야 한다.</h3><p>클래스를 만들 때 첫 번째 규칙은 크기다. 클래스는 작아야 한다. 두 번째 규칙도 크기다. 더 작아야 한다.<br>단일 책임 원칙(Single Responsibility Principle, SRP)은 클래스나 모듈을 변경할 이유가 하나, 단 하나뿐이어야 한다는 원칙이다.<br>클래스는 책임, 즉 변경할 이유가 하나여야 한다는 의미다.<br>응집도(cohesion) -클래스는 인스턴스 변수 수가 작아야 한다.<br>응집도를 유지하면 작은 클래스 여럿이 나온다.<br>큰 함수를 작은 함수 여럿으로 쪼개다 보면 종종 작은 클래스 여럿으로 쪼갤 기회가 생긴다. 그러면서 프로그램에 체계가 더 잡히고 구조가 더 투명해진다.</p><h3 id="변경하기-쉬운-클래스"><a href="#변경하기-쉬운-클래스" class="headerlink" title="변경하기 쉬운 클래스"></a>변경하기 쉬운 클래스</h3><p>요구사항은 변화기 마련이다. 따라서 코드도 변하기 마련이다.<br>구현 클래스에 의존하게 되면 테스트가 어려우며, 변화에 빠르게 대응하기 힘들다. 변화에 따르게 대응하려면 DIP 원칙을 지키는 습관을 가져야 한다.<br>DIP(Dependency Inversion Principle) 원칙은 클래스가 상세한 구현이 아니라 추상화(인터페이스)에 의존해야 한다는 원칙이다.<br>테스트가 가능할 정도로 시스템 결합도를 낮추면 유연성과 재사용성도 더 높아진다.</p><h3 id="디미터-법칙"><a href="#디미터-법칙" class="headerlink" title="디미터 법칙"></a>디미터 법칙</h3><p>디미터 법칙은 모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다.<br>객체는 자료를 숨기고 함수를 공개한다. 즉, 객체는 조회 함수로 내부 구조를 공개하면 안 된다는 것이다.<br>다음 코드는 디미터 법칙을 어기는 것으로 보인다.<br>final String outputDir &#x3D; ctxt.getOptions().getScratchDir().getAbsolutePath();</p><h3 id="서비스레이어에-있는것을-도메인-객체로-이동해라"><a href="#서비스레이어에-있는것을-도메인-객체로-이동해라" class="headerlink" title="서비스레이어에 있는것을 도메인 객체로 이동해라."></a>서비스레이어에 있는것을 도메인 객체로 이동해라.</h3><p>테이블과 도메인 객체(엔티티)는 1:N으로 구성되어야 함.<br>즉 테이블 하나에 엔티티 하나로 제한하지 마라</p><p><a href="https://velog.io/@neity16/4-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%99%80-JPA-%ED%99%9C%EC%9A%A9-3-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EA%B5%AC%EC%A1%B0-Service-Repository-%EA%B0%9C%EB%B0%9C">https://velog.io/@neity16/4-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EC%99%80-JPA-%ED%99%9C%EC%9A%A9-3-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EA%B5%AC%EC%A1%B0-Service-Repository-%EA%B0%9C%EB%B0%9C</a><br>상품도메인 개발부분 참고</p><h3 id="요약한-규칙"><a href="#요약한-규칙" class="headerlink" title="요약한 규칙"></a>요약한 규칙</h3><p>-한 메서드에 오직 한 단계의 들여쓰기만 한다.<br>-else 예약어를 쓰지 않는다. if 조건절에서 값을 return하는 방식으로 구현하면 else를 사용하지 않아도 된다.<br>-모든 원시 값과 문자열을 포장한다.<br>-한 줄에 점을 하나만 찍는다.<br>-줄여 쓰지 않는다(축약 금지).<br>-모든 엔티티를 작게 유지한다.<br>-3개 이상의 인스턴스 변수를 가진 클래스를 쓰지 않는다.<br>-일급 컬렉션을 쓴다.<br> Map을 사용하는 경우 Map의 모든 인터페이스를 노출하지 않을 수 있게됨<br>-getter&#x2F;setter&#x2F;프로퍼티를 쓰지 않는다.<br>-메소드의 라인 수를 15라인이 넘지 않도록 구현한다.<br>-try&#x2F;catch 블록을 별도 함수로 뽑아내는 편이 낫다.<br>-한 줄에 점을 하나만 찍는다. (디미터 법칙을 지키는 것을 의미)<br>-모든 엔티티를 작게 유지한다.<br>-3개 이상의 인스턴스 변수를 가진 클래스를 쓰지 않는다.<br>-게터&#x2F;세터&#x2F;프로퍼티를 쓰지 않는다.</p><p>-4개 이상은 특별한 이유가 있어도 사용하면 안된다. 인수가 2 ~ 3개 필요한 경우가 생긴다면 인수를 독자적인 클래스를 생성할 수 있는지 검토해 본다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Circle makeCircle(double x, double y, double radius);</span><br><span class="line">Circle makeCircle(Point center, double radius);</span><br></pre></td></tr></table></figure><p>-기본형 타입에 대해서도 일급객체를 만들어서 써라.<br>int position이 아닌 Postion postion으로 해서<br>position++; 보단 postion.increase(); &#x2F;&#x2F;메세지를 전달<br>-클래스 이름과 객체 이름은 명사나 명사구가 적합하다.<br>Customer, WikiPage, Account, AddressParser 등이 좋은 예다.<br>Manager, Processor, Data, Info 등과 같은 단어는 피하고, 동사는 사용하지 않는다.<br>-메소드 이름은 동사나 동사구가 적합하다.<br>postPayment, deletePage, save 등이 좋은 예다.<br>접근자, 변경자, 조건자는 자바 빈 표준에 따라 값 앞에 get, set, is를 붙인다.<br>생성자를 중복해 정의할 때는 정적 팩토리 메소드를 사용한다. 메소드를 인수를 설명하는 이름을 사용한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TDD&quot;&gt;&lt;a href=&quot;#TDD&quot; class=&quot;headerlink&quot; title=&quot;TDD&quot;&gt;&lt;/a&gt;TDD&lt;/h3&gt;&lt;p&gt;TDD와 단위테스트는 다름.&lt;br&gt;TDD: 테스트 먼저 짜고 프로덕션 코드를 구현하는것.&lt;/p&gt;
&lt;h4 id=&quot;시작전-
      
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Optional 활용방법 요약</title>
    <link href="http://KKimSangHeon.github.io/2022/04/11/optional/"/>
    <id>http://KKimSangHeon.github.io/2022/04/11/optional/</id>
    <published>2022-04-10T17:23:29.000Z</published>
    <updated>2022-04-10T17:24:36.810Z</updated>
    
    <content type="html"><![CDATA[<h3 id="생성방법"><a href="#생성방법" class="headerlink" title="생성방법"></a>생성방법</h3><ol><li><p>of()<br>Option.of(someValue)<br>someValue가 null 이면 NPE 발생</p></li><li><p>ofNullable()<br>Optional<String> opt &#x3D; Optional.ofNullable(someValue);<br>someValue가 null이여도 Null 이 들어간 Optional이 생성됨</p></li><li><p>empty()<br>Optional<String> opt &#x3D; Optional.empty(); &#x2F;&#x2F; Optional.ofNullable()와 동일</p></li></ol><h3 id="값-구하기"><a href="#값-구하기" class="headerlink" title="값 구하기"></a>값 구하기</h3><ol><li>get()<br>opt.get();</li></ol><p>값이 없을 땐 NoSuchElementException 발생</p><h3 id="값-유무-확인"><a href="#값-유무-확인" class="headerlink" title="값 유무 확인"></a>값 유무 확인</h3><p>isPresent()<br>isEmpty() &#x2F;&#x2F; 자바 11부터 생김</p><h3 id="값이-있으면-하기"><a href="#값이-있으면-하기" class="headerlink" title="값이 있으면 하기"></a>값이 있으면 하기</h3><p>String result &#x3D; opt.ifPresent(value -&gt; doSome(value));</p><p>String result &#x3D; opt.ifPresentOrElse(<br>  value -&gt; doSome(value), &#x2F;&#x2F; 값이 있을 때 실행<br>  () -&gt; doOther()   &#x2F;&#x2F;값이 없을 때 실행<br>  );</p><h4 id="값이-없으면-다른-값-사용"><a href="#값이-없으면-다른-값-사용" class="headerlink" title="값이 없으면 다른 값 사용"></a>값이 없으면 다른 값 사용</h4><p>String result &#x3D; opt.orElse(“default”);</p><p>String result &#x3D; opt.orElseGet(()-&gt;”defalut”); &#x2F;&#x2F;orElse처럼 값이 없을 때 함수를 활용하여 새로운 값을 returen함</p><p>Option<String> result &#x3D; opt.or(()-&gt;Optional.of(“defalut”)); &#x2F;&#x2F;opt 안에 값이 없을 때 optional을 리턴함</p><h4 id="값이-없으면-익셉션-있으면-값-리턴"><a href="#값이-없으면-익셉션-있으면-값-리턴" class="headerlink" title="값이 없으면 익셉션, 있으면 값 리턴"></a>값이 없으면 익셉션, 있으면 값 리턴</h4><p>Member m &#x3D; opt.orElseThrow(()-&gt;new NoMemberExcetion());</p><h4 id="map-값이-없으면-빈-Optional-리턴"><a href="#map-값이-없으면-빈-Optional-리턴" class="headerlink" title="map. 값이 없으면 빈 Optional 리턴"></a>map. 값이 없으면 빈 Optional 리턴</h4><p>map에 전달받은 함수를 실행해서 값을 변환한 Optional 리턴, 값이 없으면 빈 Optional리턴<br>Optional<LocalDate> birthOpt &#x3D; memOpt.map(mem-&gt; mem.getBirthday());<br>Optional<Integer> pdOpt &#x3D; memOpt.map(birth-&gt; cal(birth));</p><p>Optional<Integer> memOpt.map(mem-&gt; mem.getBirthday()).map(birth-&gt; cal(birth)); 형태로도 사용 가능</p><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><p>flatMap에 전달한 함수가 Optional을 리턴할 때 사용한다,<br>여러겹의 Option을 벗겨낸다고 보면 됨.<br>아래 map, flatMap의 차이를 보자</p><p>Optional<LocalDate> birthOpt &#x3D; memOpt.flatMap(mem-&gt; Optional.ofNullable(mem.getBirthday()));<br>Optional&lt;Optional<LocalDate>&gt; birthOpt &#x3D; memOpt.map(mem-&gt; Optional.ofNullable(mem.getBirthday()));</p><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>값을 충족하면 값 그대로 리턴하고 충족하지 않으면 빈 Optional 리턴</p><p>Optional<String> filterd &#x3D; strOpt.filter(str -&gt; str.length() &gt; 3);<br>filterd.ifPresent(str -&gt; System.out.println(str));</p><h4 id="두개-Optional-조합"><a href="#두개-Optional-조합" class="headerlink" title="두개 Optional 조합"></a>두개 Optional 조합</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Member</span> <span class="variable">m</span> <span class="operator">=</span> ...;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Company</span> <span class="variable">c</span> <span class="operator">=</span> getCompany(m);</span><br><span class="line"><span class="keyword">if</span> (c === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Card</span> <span class="variable">card</span> <span class="operator">=</span> createCard(m,c);</span><br><span class="line"><span class="keyword">return</span> card;</span><br></pre></td></tr></table></figure><p>를 두개의 Optional로 짜보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Member&gt; memOpt = ...;</span><br><span class="line">Optional&lt;Company&gt; compOpt = memOpt.map(mem -&gt; getCompany(mem));</span><br><span class="line"></span><br><span class="line">Optional&lt;Card&gt; card = memOpt.flatMap(</span><br><span class="line">  mem -&gt; compOpt.map(</span><br><span class="line">      comp -&gt; createCard(mem, comp)</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Optional&lt;Member&gt; memOpt = ...;</span><br><span class="line">Optional&lt;Card&gt; compOpt = memOpt.flatMap(</span><br><span class="line">  mem -&gt; &#123;</span><br><span class="line">    Optional&lt;Company&gt; compOpt = getCompanyOptional(mem));</span><br><span class="line">    <span class="keyword">return</span> compOpt.map(comp -&gt; createCard(mem, comp));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Member</span> <span class="variable">m1</span> <span class="operator">=</span> ...;</span><br><span class="line"><span class="type">Member</span> <span class="variable">m2</span> <span class="operator">=</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m1 == <span class="literal">null</span> &amp;&amp; m2 == <span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m1 == <span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">return</span> m2 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m2 == <span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">return</span> m1 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> m1.year &gt; m2.year ? m1 : m2;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>를 두개의 Optional로 짜보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Member&gt; mem1Opt = ...;</span><br><span class="line">Optional&lt;Member&gt; mem2Opt = ...;</span><br><span class="line"></span><br><span class="line">Optional&lt;Member&gt; result =</span><br><span class="line">  mem1Opt.flatMap(m1 -&gt; ...)    <span class="comment">// m1이 있으면</span></span><br><span class="line">    .or(()-&gt;mem2Opt);           <span class="comment">// map 결과가 없으면 m2 사용</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Optional&lt;Member&gt; result =</span><br><span class="line">  mem1Opt.flatMap(m1 -&gt; &#123; <span class="comment">// m1이 있으면</span></span><br><span class="line">      <span class="keyword">return</span> mem2Opt.map(m2 -&gt; &#123;  <span class="comment">//m2가 있으면</span></span><br><span class="line">          <span class="keyword">return</span> m1.year &gt; m2.year ? m1 : m2</span><br><span class="line">      &#125;).orElse(m1);  <span class="comment">//m2가 없으면 m1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .or( ()-&gt; m2);  <span class="comment">// flatMap 결과가 없으면 m2 사용</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result.orElse(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>ifPresent를 사용하면 null 사용할 때와 유사한 구조가 된다.<br>대신 map, flatMap, filter, orElse, or, ifPresent등 익숙해지자</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;생성방법&quot;&gt;&lt;a href=&quot;#생성방법&quot; class=&quot;headerlink&quot; title=&quot;생성방법&quot;&gt;&lt;/a&gt;생성방법&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;of()&lt;br&gt;Option.of(someValue)&lt;br&gt;someValue가 null 이면 NP
      
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>apache kafka 란?</title>
    <link href="http://KKimSangHeon.github.io/2022/03/24/kafka1/"/>
    <id>http://KKimSangHeon.github.io/2022/03/24/kafka1/</id>
    <published>2022-03-24T00:29:41.000Z</published>
    <updated>2022-03-28T15:52:52.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="핵심개념들"><a href="#핵심개념들" class="headerlink" title="핵심개념들"></a>핵심개념들</h3><p>카프카 ,  Producer, Consumer, Consumer Group, Topic, Partition, Segment, Broker, zookeeper, Quorum 알고리즘기반, __consumer_offsets, Broker replica, ISR, OSR, Controller, fetch의 흐름</p><h2 id="카프카"><a href="#카프카" class="headerlink" title="카프카?"></a>카프카?</h2><p>움직이는 데이터를 처리하는 플랫폼<br>카프카는 이벤트 스트리밍 플랫폼 - 흐르는 데이터를 처리하기 위한 플랫폼<br>LinkedIn 내에서 개발<br>기존의 Messaging Platform(예, MQ)로 이벤트 스트림이처리 불가능하여 이벤트 스트림 처리를 위해 개발</p><p>카프카는 이벤트 스트림을 안전하게 전송(Publish &amp; Subscribe)<br>이벤트 스트림을 디스크에 저장(write to disk)<br>이벤트 스트림을 분석 및 처리(processing &amp; ananlysis)</p><h3 id="이벤트"><a href="#이벤트" class="headerlink" title="이벤트?"></a>이벤트?</h3><p>Event는 비즈니스에서 일어나는 모든 일(데이터)을 의미<br>Event Stream은 연속적인 많은 이벤트들의 흐름을 의미</p><ol><li>이벤트 스트림을 안전하게 전송 &#x2F; Publish &amp; Subscribe</li><li>이벤트 스트림을 디스크에 안전하게 저장 &#x2F; Write to Disk(중요)</li><li>실시간 이벤트 스트림을 분석 및 처리 &#x2F; Processing &amp; Ananlysis</li></ol><p>Event(메시지&#x2F;데이터)가사용되는모든곳에서사용<br>o Messaging System<br>o IOT디바이스로부터데이터수집<br>o Realtime Event Stream Processing (Fraud Detection, 이상감지등)<br>o 애플리케이션에서 발생하는 로그수집<br>o DB동기화(MSA 기반의분리된DB간동기화)<br>o 실시간ETL<br>o Spark, Flink, Storm, Hadoop 과같은빅데이터기술과같이사용</p><h3 id="Producer-Consumer-Consumer-Group"><a href="#Producer-Consumer-Consumer-Group" class="headerlink" title="Producer, Consumer, Consumer Group"></a>Producer, Consumer, Consumer Group</h3><p>• Producer : 메시지를생산(Produce)해서 Kafka의Topic으로메시지를 보내는애플리케이션<br>• Consumer : Topic의메시지를가져와서소비(Consume)하는 애플리케이션<br>• Consumer Group : Topic의메시지를사용하기위해협력하는 Consumer들의집합<br>• 하나의Consumer는하나의Consumer Group에포함되며, Consumer Group내의Consumer들은협력하여Topic의메시지를 분산병렬처리함</p><p>Producer가Write하는LOG-END-OFFSET과Consumer Group의Consumer가Read하고<br>처리한후에Commit한CURRENT-OFFSET과의차이(Consumer Lag)가발생할수있음</p><h3 id="Topic-Partition-Segment"><a href="#Topic-Partition-Segment" class="headerlink" title="Topic, Partition, Segment"></a>Topic, Partition, Segment</h3><p>Topic : Kafka안에서메시지가저장되는장소, 논리적인표현<br>Partition : Commit Log, 하나의Topic은 하나 이상의Partition으로구성 병렬처리(Throughput향상)를 위해서 다수의Partition 사용. 파티션은 브로커들에 분산되어 저장된다.<br>Segment : 메시지(데이터)가저장되는실제물리File Segment File이 지정된 크기보다크거나 지정된 기간보다 오래되면 새파일이 열리고 메시지는새파일에추가됨</p><p>Topic생성시Partition개수를지정 개수변경가능하나운영시에는변경권장하지않음<br>Topic내의Partition들은서로독립적임<br>Event(Message)의순서는하나의Partition내에서만보장<br>Partition은Segment File들로구성됨<br>Rolling 정책: log.segment.bytes(default 1 GB), log.roll.hours(default 168 hours)</p><h4 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h4><p>Kafka Broker는Partition에대한Read및Write를관리하는소프트웨어</p><p>• Kafka Server라고부르기도함<br>• Topic내의Partition들을분산,유지및관리<br>• 각각의Broker들은ID로식별됨(단, ID는숫자)<br>• Topic의일부Partition들을포함<br>-&gt; Topic데이터의일부분(Partition)을갖을뿐데이터전체를갖고있지않음<br>• Kafka Cluster : 여러개의Broker들로구성됨<br>• Client는특정Broker에연결하면전체클러스터에연결됨<br>• 최소3대이상의Broker를하나의Cluster로구성해야함<br>-&gt; 4대이상을권장함</p><p>• Topic을구성하는Partition들은여러Broker 상에분산됨<br>• Topic생성시Kafka가자동으로Topic을구성하는전체 Partition들을모든Broker에게할당해주고분배해줌</p><p>모든 Kafka Broker는 Bootstrap(부트스트랩)서버라고부름<br>• 하나의Broker에만연결하면Cluster전체에연결됨<br>-&gt; 하지만,특정Broker장애를대비하여,전체Broker List(IP, port)를파라미터로입력권장<br>• 각각의Broker는모든Broker, Topic, Partition에대해알고있음(Metadata)</p><h3 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h3><p>Zookeeper는Broker를관리(Broker 들의목록&#x2F;설정을관리)하는소프트웨어<br>• Zookeeper는변경사항에대해Kafka에알림<br>-&gt;Topic 생성&#x2F;제거, Broker 추가&#x2F;제거등<br>• Zookeeper 없이는Kafka가작동할수없음<br>-&gt;KIP1)-500 을통해서Zookeeper제거가진행중<br>-&gt;2022년에Zookeeper를제거한정식버전출시예정중<br>• Zookeeper는홀수의서버로작동하게설계되어있음 (최소3, 권장5)<br>• Zookeeper에는Leader(writes)가있고나머지 서버는Follower(reads)</p><p>KIP : Kafka Improvement Proposal</p><p>Zookeeper는 분산형 Configuration 정보유지, 분산동기화서비스를제공하고대용량분산<br>시스템을위한네이밍레지스트리를제공하는소프트웨어<br>Leader, Follower로 구성되며 Floower는 Leader와 동기화하여 브로커에 전달한다.</p><p>분산작업을제어하기위한Tree형태의데이터저장소<br>-&gt; Zookeeper를사용하여멀티Kafka Broker들간의정보(변경사항포함)공유,동기화등을수행</p><h4 id="zookeeper는-Quorum-알고리즘기반"><a href="#zookeeper는-Quorum-알고리즘기반" class="headerlink" title="zookeeper는 Quorum 알고리즘기반"></a>zookeeper는 Quorum 알고리즘기반</h4><p>Quorum(쿼럼)은“정족수”이며, 합의체가의사를진행시키거나의결을하는데필요한최소한도의 인원수를뜻함<br>분산코디네이션환경에서예상치못한장애가발생해도분산시스템의일관성을유지시키기 위해서사용<br>Ensemble이3대로구성되었다면Quorum은2,즉Zookeeper 1대가장애가발생하더라도정상동작<br>Ensemble이5대로구성되었다면Quorum은3,즉Zookeeper 2대가장애가발생하더라도정상동작</p><p>3대를쓰나 4대를 쓰나 1개의 장애밖에 못버틴다(홀수를 권장하는 이유)</p><p>• Broker는Partition에대한Read및Write를관리하는소프트웨어<br>• Broker는Topic내의Partition들을분산,유지및관리<br>• 최소3대이상의Broker를하나의Cluster로구성해야함<br>-&gt; 4대이상을권장함<br>• Zookeeper는Broker를관리(Broker 들의목록&#x2F;설정을관리)하는소프트웨어<br>• Zookeeper는홀수의서버로작동하게설계되어있음(최소3, 권장5)</p><h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><p>Message &#x3D;&#x3D; Record &#x3D;&#x3D; Event &#x3D;&#x3D; Data</p><p>레코드는 Header(Topic, Partition, Timestamp, etc), Key, Value로 구성된다.<br>Key와Value는Avro, JSON 등다양한형태가가능</p><p>Kafka는Record(데이터)를Byte Array로저장</p><p>흐름</p><ol><li>프로듀서에서 토픽을 send()</li><li>Serializer(String, avro, json ..등 다양함) 를 통해 byte array로 변환</li><li>Partitioner을 통해 어느파티션으로 보낼지 정해지고</li><li>Compress(사용유무 선택가능)</li><li>RecordAccumulator으로 보내져서 배치 혹은 건별로 카프카로 전송이 된다.</li><li>성공하면 metadata를 리턴하고 실패하면 retry</li></ol><p>개발자는 Serializer, Compress만 설정하고 send()메소드 정도만 호출하면 된다</p><p>Partitioner의역할<br>메시지를Topic의어떤Partition으로보낼지결정(Hash(Key) % Number of Partitions)</p><p>Key 가null일때처리<br>Kafka 2.4 이전 : DefaultPartitioner는 Round Robin정책으로동작. 여러 파티션에 하나씩 배정</p><p>Kafka 2.4이후: DefaultPartitioner는 Sticky정책으로동작. 하나의Batch가닫힐때까지 하나의partition에게record를 보내고랜덤으로Partition 선택.<br>배치처리가 더욱 효율적으로 이뤄짐</p><h3 id="Counsumer"><a href="#Counsumer" class="headerlink" title="Counsumer"></a>Counsumer</h3><p>Consumer Offset : Consumer Group이읽은위치를표시</p><p>• Consumer가자동이나수동으로데이터를읽은위치를commit하여다시읽음을방지<br>• __consumer_offsets 라는Internal Topic에서Consumer Offset을저장하여관리</p><p>4개의Partition으로구성된Topic의데이터를사용하는Single Consumer가있는경우,<br>이Consumer는Topic의모든Partition에서모든Record를Consume함</p><p>하나의Consumer는각Partition에서의<br>Consumer Offset을별도로유지(기록) 하면서모든Partition에서Consume함</p><p>• 4개의파티션이있는Topic를consume하는4개의Consumer가하나의Consumer Group에있다면,각Consumer는정확히하나의Partition에서Record를consume함<br>• Partition은항상Consumer Group내의하나의Consumer에의해서만사용됨<br>• Consumer는주어진Topic에서0개이상의많은Partition을사용할수있음</p><p>Partition이2 개이상인경우모든메시지에대한전체순서보장불가능<br>Partition을1개로구성하면모든메시지에서전체순서보장가능‒처리량저하<br>대부분의경우, Key로구분할수있는메시지들의순서보장이필요한경우가많음</p><p>운영중에Partition 개수를변경하면어떻게될까?<br>해쉬알고리즘은 파티션 갯수로 나누기 때문에 결국 순서보장이 불가능해짐</p><p>Key Cardinality는Consumer Group의개별Consumer가 수행하는작업의양에영향<br>적절히 잘 키를 선택해서 누군 놀고 누군 쉬는것이 일어나지 않도록 해야함<br>• Key선택이잘못되면작업부하가 고르지않을수있음<br>• Key는Integer, String등과같은 단순한유형일필요가없음<br>• Key는Value와마찬가지로Avro, JSON 등여러필드가있는복잡한객체일수있음<br>• 따라서, Partition전체에 Record를고르게배포하는Key를 만드는것이중요</p><p>Consumer Rebalancing<br>Consumer Group의다른Consumer가 실패한Consumer를대신함</p><h4 id="복제"><a href="#복제" class="headerlink" title="복제"></a>복제</h4><p>Broker에장애가발생하면어떻게될까?<br>장애가발생한Broker내의 Partition들은모두사용할수없게되는문제발생</p><p>다른Broker에서장애가발생한Partition을대신해서Partition을새로만들면장애를해결?<br>기존메시지는버릴것인가?기존Offset 정보들을버릴것인가?</p><p>Partition을복제(Replication)하여다른Broker상에서복제물(Replicas)을만들어서장애를 미리대비함</p><p>Replicas - Leader Partition, Follower Partition로 구성됨<br>Replication Factor &#x3D; 3이라 하면 Leader Partition 한개, Follower Partition 두개로 구성됨</p><p>Producer는Leader에만Write하고Consumer는Leader로부터만Read함(Apache Kafka 2.4부터 Follower 파티션에서 컨슈머가 Fetching(Read) 가능)<br>Follower는Broker장애시안정성을제공하기위해서만존재<br>Follower는Leader의Commit Log에서데이터를가져오기요청(Fetch Request)으로복제 - 팔로워가 리더한테 요청을 해서 가져가는 구조</p><p>Leader에장애가발생하면?<br>Kafka 클러스터는Follower중에서새로운Leader를선출 Clients(Producer&#x2F;Consumer)는자동으로새Leader로전환</p><p>하나의Broker에만Partition의Leader들이몰려있다면?<br>특정Broker에만Client(Producer&#x2F;Consumer)로인해부하집중(Hot Spot)</p><p>Hot Spot 방지<br>auto.leader.rebalance.enable : 기본값enable # 리더가 각 브로커 적절히 분배되도록 설정하는것.<br>leader.imbalance.check.interval.seconds : 기본값300 sec  # 30 초마다 리더가 적절히 분배되었는지 확인<br>leader.imbalance.per.broker.percentage : 기본값10 # 다른 브로커보다 10퍼센트 이상 많이가져가면 불균형이라 판단</p><p>Rack Awareness<br>Rack 간분산하여Rack 장애를대비<br>동일한Rack 혹은Available Zone상의Broker들에동일한“rack name” 지정<br>복제본(Replica-Leader&#x2F;Follower)은최대한Rack간에균형을유지하여Rack 장애대비<br>Topic 생성시또는Auto Data Balancer&#x2F;Self Balancing Cluster 동작때만실행</p><h3 id="In-Sync-Replicas-ISR-Leader-장애시Leader를선출하는데사용"><a href="#In-Sync-Replicas-ISR-Leader-장애시Leader를선출하는데사용" class="headerlink" title="In-Sync Replicas(ISR) : Leader 장애시Leader를선출하는데사용"></a>In-Sync Replicas(ISR) : Leader 장애시Leader를선출하는데사용</h3><p>In-Sync Replicas(ISR)는High Water Mark라고하는지점까지동일한Replicas (Leader와 Follower모두)의목록</p><p>Leader에장애가발생하면, ISR 중에서새Leader를선출</p><h3 id="ISR-replica-lag-max-messages"><a href="#ISR-replica-lag-max-messages" class="headerlink" title="ISR : replica.lag.max.messages"></a>ISR : replica.lag.max.messages</h3><p>replica.lag.max.messages&#x3D;4 - 리더가 갖고있는 LOG-END-OFFSET과 4 미만으로 차이나는 팔로워들을 ISR로 지정한다 4개 이상 차이나는 팔로워들을 Out-of-Sync Follower(OSR) 이라 한다,</p><p>High Water Mark: 4미만(replica.lag.max.messages&#x3D;4일 때)으로 차이나는 지점 중 하나로써 컨슈머가 거기까지 잘 복사해간것을 의미</p><h4 id="replica-lag-max-messages로ISR판단시나타날수있는문제점"><a href="#replica-lag-max-messages로ISR판단시나타날수있는문제점" class="headerlink" title="replica.lag.max.messages로ISR판단시나타날수있는문제점"></a>replica.lag.max.messages로ISR판단시나타날수있는문제점</h4><p>• 메시지유입량이갑자기늘어날경우(예,초당10 msg&#x2F;sec),지연으로판단하고OSR(Outof-<br>Sync Replica)로상태를변경시킴<br>• 메시지가항상일정한비율(초당유입되는메시지, 3 msg&#x2F;sec 이하)로Kafka로들어올<br>때, replica.lag.max.messages&#x3D;5로하면5개이상으로지연되는경우가없으므로 ISR들이정상적으로동작<br>• 실제Follower는정상적으로동작하고단지잠깐지연만발생했을뿐인데, replica.lag.max.messages옵션을이용하면OSR로판단하게되는문제가발생(운영중에 불필요한error 발생및그로인한불필요한retry 유발)</p><h3 id="ISR-replica-lag-time-max-ms으로판단해야함"><a href="#ISR-replica-lag-time-max-ms으로판단해야함" class="headerlink" title="ISR : replica.lag.time.max.ms으로판단해야함"></a>ISR : replica.lag.time.max.ms으로판단해야함</h3><p>• Follower가Leader로Fetch 요청을보내는Interval을체크<br>• 예) replica.lag.time.max.ms &#x3D; 10000이라면Follower가Leader로Fetch 요청을<br>10000 ms내에만요청하면정상으로판단<br>• Confluent 에서는replica.lag.time.max.ms옵션만제공(복잡성제거)</p><p>ISR은Leader(브로커)가관리<br>①Follower가너무느리면Leader는ISR에서Follower를제거하고ZooKeeper에ISR을유지<br>②Controller는Partition Metadata에대한변경사항에대해서Zookeeper로부터수신<br>(replica.lag.time.max.ms이내에 Follower가fetch하지않으면 ISR에서제거함)</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller ??"></a>Controller ??</h3><p>• Kafka Cluster내의Broker중하나가Controller가됨<br>• Controller는ZooKeeper를통해Broker Liveness를모니터링 , ISR 정보를 받아들임<br>• Controller는Leader와Replica 정보를Cluster내의다른Broker들에게전달<br>• Controller는ZooKeeper에Replicas정보의복사본을유지한다음더빠른액세스를<br>위해클러스터의모든Broker들에게동일한정보를캐시함<br>• Controller가Leader 장애시Leader Election을수행<br>• Controller가장애가나면다른Active Broker들중에서재선출됨(주키퍼가 함)</p><h3 id="Last-Committed-Offset-Current-Position-High-Water-Mark-Log-End-Offset"><a href="#Last-Committed-Offset-Current-Position-High-Water-Mark-Log-End-Offset" class="headerlink" title="Last Committed Offset, Current Position, High Water Mark, Log End Offset??"></a>Last Committed Offset, Current Position, High Water Mark, Log End Offset??</h3><p>• Last Committed Offset(Current Offset) : Consumer가최종Commit한Offset<br>• Current Position : Consumer가읽어간위치(처리중, Commit 전)<br>• High Water Mark(Committed &#x2F; Fully-Replicated Committed) : ISR(Leader-Follower)간에복제된Offset<br>• Log End Offset : Producer가메시지를보내서저장된,로그의맨끝Offset</p><h3 id="Committed의의미"><a href="#Committed의의미" class="headerlink" title="Committed의의미?"></a>Committed의의미?</h3><p>• ISR 목록의모든Replicas가메시지를성공적으로가져오면“Committed”. OSR에 있는건 신경쓰지 않음<br>• Consumer는Committed메시지만읽을수있음<br>• Leader는메시지를Commit할시기를결정<br>• Committed메시지는모든Follower에서 동일한Offset을갖도록보장(OSR이라 한들 언젠간 따라잡을테니)<br>• 즉, 어떤Replica가Leader인지에관계없이 (장애발생이라도) 모든Consumer는해당 Offset에서같은데이터를볼수있음<br>• Broker가다시시작할때Committed 메시지목록을유지하도록하기위해, Broker의모든Partition에대한마지막 Committed Offset은replicationoffset-checkpoint라는파일에기록됨</p><p>High Water Mark<br>• 가장최근에Committed메시지의Offset추적<br>• replication-offset-checkpoint 파일에체크포인트를기록</p><p>Leader Epoch<br>• 새Leader가선출된시점을Offset으로표시<br>• Broker복구중에메시지를체크포인트로자른다음현재Leader를따르기위해사용됨<br>• Controller가새Leader를선택하면Leader Epoch를업데이트하고해당정보를ISR 목록의모든구성원에게보냄<br>• leader-epoch-checkpoint 파일에체크포인트를기록<br>즉 새로운 리더에 대한 기록이라고 보면 될듯</p><h3 id="fetch의-흐름"><a href="#fetch의-흐름" class="headerlink" title="fetch의 흐름"></a>fetch의 흐름</h3><p>팔로워들은 패쳐쓰레드가 리더한테 페치(데이터를 가져와서)를 해서 자신의 파티션에 write를 함<br>팔로워의 패쳐 쓰레드가 fetch를 했는데 null 이 오는경우(더이상 데이터를 가져갈게 없는 최신의 상태)<br>Leader는 자신의 High Water Mark 이동한다.<br>그 이후 또 팔로워가 fetch를 리더한테 하면 Leader는High Water Mark를 던져주고 팔로워들 또한 High Water Mark를 갱신한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;핵심개념들&quot;&gt;&lt;a href=&quot;#핵심개념들&quot; class=&quot;headerlink&quot; title=&quot;핵심개념들&quot;&gt;&lt;/a&gt;핵심개념들&lt;/h3&gt;&lt;p&gt;카프카 ,  Producer, Consumer, Consumer Group, Topic, Partitio
      
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/CS/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="Kafka" scheme="http://KKimSangHeon.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>spring security</title>
    <link href="http://KKimSangHeon.github.io/2022/03/24/spring-security/"/>
    <id>http://KKimSangHeon.github.io/2022/03/24/spring-security/</id>
    <published>2022-03-23T23:54:07.000Z</published>
    <updated>2022-07-28T15:57:15.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1부"><a href="#1부" class="headerlink" title="1부"></a>1부</h2><p>Principal principal는 아규먼트 리졸버로 받아서 처리된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/dashboard&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dashboard</span><span class="params">(Model model, Principal principal)</span> &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello &quot;</span> + principal.getName());</span><br><span class="line">    sampleService.dashboard();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;dashboard&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>의존성 추가</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>의존성을 추가하면 모든 요청은 인증을 필요로 해지고, 기본적으로 계정을 하나 만들어주는데 user&#x2F;{패스워드랜덤} 으로 만들어준다.</p><h3 id="11page"><a href="#11page" class="headerlink" title="11page"></a>11page</h3><p>AuthenticationManager를 빈으로 등록하는 이유는 다른 곳에서 사용하기 위함임.<br>기본적으론 빈으로 등록이 안된다고 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="12page-noop-123"><a href="#12page-noop-123" class="headerlink" title="12page {noop}123?"></a>12page {noop}123?</h3><p>앞에 {xxxx}는 인코딩 방식을 의미한다. {noop}는 평문으로 저장한것이다</p><p>UserDetailsService 를 implements한 service를 빈으로 등록해둘 경우 따로 WebSecurityConfigureAdapter를 상속하고 configure() 메소드에 아래처럼 세팅을 안해도 된다.<br>PasswordEncoder 또한 마찬가지</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  AccountService accountService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    auth.UserDetailsService(accountService);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14page"><a href="#14page" class="headerlink" title="14page"></a>14page</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>가짜 유저를 활용하여 테스트 코드를 작성하는법.<br>실제로 디비에 들어있다고 가정하는것이 아닌 해당 테스트 유저가 있다고 가정하고 특정 페이지에 접근시 어떤 응답이 발생하는지 확인하는데 사용됨</p><p>@WithUser 대신 @WithMockUser(username &#x3D; “keesun”, roles &#x3D; “USER”) 를 넣어도 되지만 반복을 줄이기 위해 어노테이션을 하나 생성한것임</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@WithMockUser(username = &quot;keesun&quot;, roles = &quot;USER&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WithUser &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@WithAnonymousUser</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">index_anonymous</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    mockMvc.perform(get(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">            .andDo(print())</span><br><span class="line">            .andExpect(status().isOk());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@WithUser</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">index_user</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    mockMvc.perform(get(<span class="string">&quot;/&quot;</span>))</span><br><span class="line">            .andDo(print())</span><br><span class="line">            .andExpect(status().isOk());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@WithUser</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">admin_user</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    mockMvc.perform(get(<span class="string">&quot;/admin&quot;</span>))</span><br><span class="line">            .andDo(print())</span><br><span class="line">            .andExpect(status().isForbidden());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@WithMockUser(username = &quot;keesun&quot;, roles = &quot;ADMIN&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">admin_admin</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    mockMvc.perform(get(<span class="string">&quot;/admin&quot;</span>))</span><br><span class="line">            .andDo(print())</span><br><span class="line">            .andExpect(status().isOk());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>form 로그인을 활용하여 로그인하는 테스트코드를 확인해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login_success</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;keesun&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="type">Account</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.createUser(username, password);</span><br><span class="line">    mockMvc.perform(formLogin().user(user.getUsername()).password(password))</span><br><span class="line">            .andExpect(authenticated());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login_success2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;keesun&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="type">Account</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.createUser(username, password);</span><br><span class="line">    mockMvc.perform(formLogin().user(user.getUsername()).password(password))</span><br><span class="line">            .andExpect(authenticated());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login_fail</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;keesun&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="type">Account</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.createUser(username, password);</span><br><span class="line">    mockMvc.perform(formLogin().user(user.getUsername()).password(<span class="string">&quot;12345&quot;</span>))</span><br><span class="line">            .andExpect(unauthenticated());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Account <span class="title function_">createUser</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">    <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">    account.setUsername(username);</span><br><span class="line">    account.setPassword(password);</span><br><span class="line">    account.setRole(<span class="string">&quot;USER&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> accountService.createNew(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2부"><a href="#2부" class="headerlink" title="2부"></a>2부</h2><h3 id="16page"><a href="#16page" class="headerlink" title="16page"></a>16page</h3><p>인증된 사용자 정보를 Principal라고 하는데 이를 Authentication객체에 담아서 보관하고 Authentication를 SecurityContext로 감싸고 SecurityContext를 SecurityContextHolder로 감싼다.</p><p>SecurityContextHolder</p><ul><li>SecurityContext 제공, 기본적으로 ThreadLocal을 사용한다.<br>(즉 Authentication을 한 쓰레드 안에서 사용가능(파라미터를 넘기지 않아도..))<br>ThreadLocal 대신 다른 전략을 활용할 수 있다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> AccountRepository accountRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountRepository.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (account == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(username);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>.builder()</span><br><span class="line">                    .username(account.getUsername())</span><br><span class="line">                    .password(account.getPassword())</span><br><span class="line">                    .roles(account.getRole())</span><br><span class="line">                    .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SampleService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dashboard</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 리턴하는건 위에 User.builder()에서 생성된 UserDetails 타입이다.</span></span><br><span class="line">        <span class="comment">// UserDetails 는 애플리케이션이 가지고 있는 유저 정보와</span></span><br><span class="line">        <span class="comment">//스프링 시큐리티가 사용하는 Authentication 객체 사이의 어댑터이다.</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">principal</span> <span class="operator">=</span>  authentication.getPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// User.builder()에서 지정한 role가 들어가있음</span></span><br><span class="line">        Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities = authentication.getAuthorities();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// null이 나옴</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">credentials</span> <span class="operator">=</span> authentication.getCredentials();</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">authenticated</span> <span class="operator">=</span> authentication.isAuthenticated();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###SecurityContextHolder, AuthenticationManager   18p<br>Authentication정보를 담고있는 SecurityContextHolder. 그리고 인증을 담당하는 AuthenticationManager</p><h3 id="인증을-하는-AuthenticationManager-ProviderManager를-보통-많이씀-의-흐름-인증-연관"><a href="#인증을-하는-AuthenticationManager-ProviderManager를-보통-많이씀-의-흐름-인증-연관" class="headerlink" title="인증을 하는 AuthenticationManager(ProviderManager를 보통 많이씀)의 흐름 (인증 연관)"></a>인증을 하는 AuthenticationManager(ProviderManager를 보통 많이씀)의 흐름 (인증 연관)</h3><p>스프링 시큐리티에서 인증(Authentication)은 AuthenticationManager가 한다.</p><p>AuthenticationManager인터페이스는 아래 메소드 하나만 갖는다.<br><code>Authentication authenticate(Authentication authentication) throws AuthenticationException;</code><br>인자로 받은 Authentication이 유효한 인증인지 확인하고 유효하다면 Authentication 객체를 리턴한다.<br>인자 Authentication는 사용자가 입력한 인증에 필요한 정보(username, password)로 만든 객체임. (폼 인증인 경우)<br>인증을 확인하는 과정에서 비활성 계정, 잘못된 비번, 잠긴 계정 등의 에러를 던질 수 있다.</p><p>AuthenticationManager 구현체로는 ProviderManager를 보통 많이쓴다.</p><p>인증이 들어오면 ProviderManager 의 authenticate() 메소드가 호출되는데<br>ProviderManager는 private List<AuthenticationProvider> providers; 를 갖고있는데 얘네들로 처리 가능한 인증인지 확인해보고 자신이 처리하지 못하는 인증일 경우  this.parent.authenticate(authentication); 를 통해 부모의 authenticate() 메소드를 호출한다.</p><p>인증이 가능한 providers를 갖고있는 ProviderManager에 가게되면 provider.authenticate() 메소드를 호출하게 되고</p><p>UserDetailsService를 사용했을 경우 AbstractUserDetailsAuthenticationProvider(추상클래스임) 로 들어가고  this.retrieveUser() 메소드를 호출하게 된다.</p><p>그 후 DaoAuthenticationProvider(AbstractUserDetailsAuthenticationProvider를 상속한클래스) 의 retrieveUser()로 들어오고  this.getUserDetailsService() 를 활용하는데 이는 위에서 만든 UserDetailsService를 implements한 AccountService이다.</p><p>그 후 DaoAuthenticationProvider를 빠져나와  AbstractUserDetailsAuthenticationProvider 안에서 this.preAuthenticationChecks.check(user);를 하는데 여기서 추가적인 체크를 진행한다. (계정잠금유무, 비활성 계정 등)</p><p>그 후 ProviderManager 안 authenticate() 에선 result라는 객체(Authentication타입)를 리턴하는데 얘는 곧 AuthenticationManager의 authenticate()메서드에서 리턴하는 객체이다.</p><p>result 안에 principal이라고 들어있는데 얘는 아까 위에서 loadUserByUsername() 메소드에서 리턴한 user객체가 들어있다.</p><p>또한 이 result(Authentication타입)가 SecurityContextHolder안에 들어가게 된다.</p><p><code>정리</code> : 인증을 담당하는 AuthenticationManager 인터페이스를 구현한 ProviderManager는 AuthenticationProvider를 리스트로 갖고이으며 갖고있는 리스트로 인증을 처리할 수 없을 경우 this.parent.authenticate(authentication); 메소드를 호출하여 부모의 리스트를 통해 인증을 진행한다. UserDetailsService를 사용했을 경우 AbstractUserDetailsAuthenticationProvider -&gt; DaoAuthenticationProvider 를 거치게 되고 retrieveUser()메소드가 호출되는데 여기선 UserDetailsService를 implements한 객체가 사용되며 loadUserByUsername() 메소드가 사용된다. 그 후  this.preAuthenticationChecks.check(user); 를 하는데 여기서 추가적인 체크를 진행한다. (계정잠금유무 등) 최종적으로 result라는 객체(Authentication타입)를 리턴하게 되고 result 안에 principal이라고 들어있는데 얘는 아까 위에서 loadUserByUsername() 메소드에서 리턴한 user객체가 들어있다. 또한 이 객체(result)는  SecurityContextHolder안에서 찾을 수 있다.</p><h4 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h4><p>한 쓰레드안에서 변수를 공유</p><p>Java.lang 패키지에서 제공하는 쓰레드 범위 변수. 즉, 쓰레드 수준의 데이터 저장소.<br>●    같은 쓰레드 내에서만 공유.<br>●    따라서 같은 쓰레드라면 해당 데이터를 메소드 매개변수로 넘겨줄 필요 없음.<br>●    SecurityContextHolder의 기본 전략.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Account&gt; ACCOUNT_THREAD_LOCAL</span><br><span class="line">            = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setAccount</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        ACCOUNT_THREAD_LOCAL.set(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Account <span class="title function_">getAccount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ACCOUNT_THREAD_LOCAL.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="13-Authencation과-SecurityContextHolder-인증-연관"><a href="#13-Authencation과-SecurityContextHolder-인증-연관" class="headerlink" title="13.    Authencation과 SecurityContextHolder (인증 연관)"></a>13.    Authencation과 SecurityContextHolder (인증 연관)</h3><p>AuthenticationManager가 인증을 마친 뒤 리턴 받은 Authentication 객체의 행방은?<br>SecurityContextHolder에 Authencation이 언제들어가는지 확인해보자.</p><p>크게 UsernamePasswordAuthenticationFilter, SecurityContextPersisenceFilter 가  Authencation 객체를 SecurityContextHolder에 넣어준다.(위 예제의 경우)</p><p>UsernamePasswordAuthenticationFilter<br>●    폼 인증을 처리하는 시큐리티 필터<br>●    인증된 Authentication 객체를 SecurityContextHolder에 넣어주는 필터<br>●    SecurityContextHolder.getContext().setAuthentication(authentication)</p><p>SecurityContextPersistenceFilter<br>●    SecurityContext를 HTTP session에 캐시(기본 전략)하여 여러 요청에서 Authentication을 공유할 수 있게하는 필터.<br>●    SecurityContextRepository를 교체하여 세션을 HTTP session이 아닌 다른 곳에 저장하는 것도 가능하다.</p><p><code>로그인 전 상세흐름</code></p><p>처음 SecurityContextPersistenceFilter필터에 걸리는데 SecurityContextPersistenceFilter는 캐싱하고 있던 SecurityContext를 매 요청마다 복구하려 한다.<br><strong><code>SecurityContextPersistenceFilter.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SecurityContext</span> <span class="variable">contextBeforeChainExecution</span> <span class="operator">=</span> repo.loadContext(holder);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SecurityContextHolder.setContext(contextBeforeChainExecution);</span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>그 후 UsernamePasswordAuthenticationFilter에 걸리게 되는데(폼 인증일 때)<br>AuthenticationManager 를 가져와 authenticate()를 실행한다. 이 때 ProviderManager를 통해 인증이 벌어진다.<br>즉 UsernamePasswordAuthenticationFilter가 AuthenticationManager(ProviderManager가 얘를 구현함)를 쓰는것임</p><p><strong><code>UsernamePasswordAuthenticationFilter.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br></pre></td></tr></table></figure><p>인증이 정상적으로 일어나게 되면 UsernamePasswordAuthenticationFilter 가 상속한 AbstractAuthenticationProcessingFilter로 가게 되고 AbstractAuthenticationProcessingFilter는 UsernamePasswordAuthenticationFilter의 attemptAuthentication() 메소드를 통해 얻은 인증결과인 authResult를 활용하여 successfulAuthentication() 메소드를 호출하고</p><p><strong><code>AbstractAuthenticationProcessingFilter.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="comment">// attemptAuthentication는 추상메서드로써 UsernamePasswordAuthenticationFilter이 구현한걸 사용함</span></span><br><span class="line">    authResult = attemptAuthentication(request, response);    </span><br><span class="line">    successfulAuthentication(request, response, chain, authResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>successfulAuthentication() 메소드를 따라가면 SecurityContextHolder에 인증을 넣는것을 볼 수 있다.</p><p><strong><code>AbstractAuthenticationProcessingFilter.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">    HttpServletResponse response, FilterChain chain, Authentication authResult)</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">      SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>정리하자면 AbstractAuthenticationProcessingFilter는 템플릿 메소드 패턴이며  UsernamePasswordAuthenticationFilter은 attemptAuthentication()메소드를 구현한것이다.</p><p><code>로그인 후 상세흐름</code><br>SecurityContextPersistenceFilter가 먼저 받고 SecurityContextRepository(기본적인 실 구현체 HttpSessionSecurityContextRepository) 에서 SecurityContext를 가져오고 SecurityContextHolder 에 다시 넣어준다.</p><p><strong><code>SecurityContextPersistenceFilter.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SecurityContextRepository repo;</span><br><span class="line"></span><br><span class="line"><span class="type">SecurityContext</span> <span class="variable">contextBeforeChainExecution</span> <span class="operator">=</span> repo.loadContext(holder);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SecurityContextHolder.setContext(contextBeforeChainExecution);</span><br><span class="line">      chain.doFilter(holder.getRequest(), holder.getResponse());</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">      SecurityContextHolder.clearContext();</span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>즉 SecurityContextPersistenceFilter는 매 요청마다 SecurityContextHolder에 SecurityContext를 넣어주고 비우고를 반복한다.</p><p>총 15개정도의 필터가 있다고 한다..</p><h3 id="스프링-시큐리티-Filter와-FilterChainProxy"><a href="#스프링-시큐리티-Filter와-FilterChainProxy" class="headerlink" title="스프링 시큐리티 Filter와 FilterChainProxy"></a>스프링 시큐리티 Filter와 FilterChainProxy</h3><p>SecurityContextPersistenceFilter, UsernamePasswordAuthenticationFilter가 어디서 어떻게 호출 되는지 보자</p><p>FilterChainProxy에 getFilters()메소드가 있는데 urlpattern이 매치가 되면 매칭하는필터들을 가져오고 필터들을 순회하며 순차적으로 실행한다.<br>즉 filterChains중 하나의 chain에서 필터들을 찾아서 적용한다. (각 SecurityFilterChain은 여러개의 필터를 갖고있음)<br><strong><code>FilterChainProxy.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Filter&gt; <span class="title function_">getFilters</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (SecurityFilterChain chain : filterChains) &#123;</span><br><span class="line">    <span class="keyword">if</span> (chain.matches(request)) &#123;</span><br><span class="line">      <span class="keyword">return</span> chain.getFilters();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">VirtualFilterChain</span> <span class="keyword">implements</span> <span class="title class_">FilterChain</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    currentPosition++;</span><br><span class="line">    <span class="type">Filter</span> <span class="variable">nextFilter</span> <span class="operator">=</span> additionalFilters.get(currentPosition - <span class="number">1</span>);</span><br><span class="line">    nextFilter.doFilter(request, response, <span class="built_in">this</span>);</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 getFilters() 에서 순회되는 filterChains(springSecurityFilterChain 리스트)는 내가 생성한 SecurityConfig(@configure가 붙어있고 WebSecurityConfigureAdapter를 상속한 애)가 된다. 즉 SecurityConfig가 여러개가 있으면 filterChains는 여러개가 됨.</p><blockquote><p>WebSecurity는  WebSecurityConfiguration 으로 만들어지며 WebSecurity를 활용하여 filterChainProxy를 만든다. 이 체인이 바로  DelegatingFilterProxy가 위임하는 체인 프록시이다. 또한 시큐리티 필터들도 WebSecurity가 만들게 된다,</p></blockquote><p>filterChains안에 필터들이 들어있다.</p><p>스프링 시큐리티가 제공하는 필터들</p><ol><li>WebAsyncManagerIntergrationFilter</li><li>SecurityContextPersistenceFilter</li><li>HeaderWriterFilter</li><li>CsrfFilter</li><li>LogoutFilter</li><li>UsernamePasswordAuthenticationFilter</li><li>DefaultLoginPageGeneratingFilter</li><li>DefaultLogoutPageGeneratingFilter</li><li>BasicAuthenticationFilter</li><li>RequestCacheAwareFtiler</li><li>SecurityContextHolderAwareReqeustFilter</li><li>AnonymouseAuthenticationFilter</li><li>SessionManagementFilter</li><li>ExeptionTranslationFilter</li><li>FilterSecurityInterceptor</li></ol><p>이 모든 필터는 FilterChainProxy가 갖고있으며 사용한다.(SecurityFilterChain 마다 갖고있는 필터가 다름)</p><h3 id="15-DelegatingFilterProxy와-FilterChainProxy"><a href="#15-DelegatingFilterProxy와-FilterChainProxy" class="headerlink" title="15.    DelegatingFilterProxy와 FilterChainProxy"></a>15.    DelegatingFilterProxy와 FilterChainProxy</h3><p>서블릿 필터 구현체중 하나인 DelegatingFilterProxy. 누군가에게 위임하는 프록시.<br>즉 자기가 직접 처리하지 않고 스프링 내 bean에게 위임함.<br>DelegatingFilterProxy가 FilterChainProxy를 호출하는것</p><p>DelegatingFilterProxy<br>●    일반적인 서블릿 필터.<br>●    서블릿 필터 처리를 스프링에 들어있는 빈으로 위임하고 싶을 때 사용하는 서블릿 필터.<br>●    타겟 빈 이름을 설정한다.<br>●    스프링 부트 없이 스프링 시큐리티 설정할 때는 AbstractSecurityWebApplicationInitializer를 사용해서 등록.<br>●    스프링 부트를 사용할 때는 자동으로 등록 된다. (SecurityFilterAutoConfiguration)</p><p>FilterChainProxy<br>●    보통 “springSecurityFilterChain” 이라는 이름의 빈으로 등록된다</p><p><code>스프링부트 사용시</code><br>DelegatingFilterProxy -&gt; SecurityFilterAutoConfiguration -&gt; FilterChainProxy -&gt; filter list 호출</p><h3 id="16-AccessDecisionManager-인가-연관"><a href="#16-AccessDecisionManager-인가-연관" class="headerlink" title="16.    AccessDecisionManager (인가 연관)"></a>16.    AccessDecisionManager (인가 연관)</h3><p><code>인가</code>를 할 땐 AccessDecisionManager (인터페이스임)를 쓴다.<br>AccessDecisionManager는 여러개의 AccessDecisionVoter(투표자)가 있다,</p><p>Access Control 결정을 내리는 인터페이스로, 구현체 3가지를 기본으로 제공한다.<br>●    AffirmativeBased: 여러 Voter중에 한명이라도 허용하면 허용. (디폴트)<br>●    ConsensusBased: 다수결<br>●    UnanimousBased: 만장일치</p><p>AccessDecisionVoter<br>●    해당 Authentication이 특정한 Object에 접근할 때 필요한 ConfigAttributes를 만족하는지 확인한다.<br>●    WebExpressionVoter: 웹 시큐리티에서 사용하는 기본 구현체, ROLE_Xxxx가 매치하는지 확인.<br>●    RoleHierarchyVoter: 계층형 ROLE 지원. ADMIN &gt; MANAGER &gt; USER</p><p>AffirmativeBased 를 보면 아래와같은것들이 있다. 투표를 진행하는 코드임. 하나라도 ACCESS_GRANTED이면 승인함<br><strong><code>AffirmativeBased.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AffirmativeBased</span> <span class="keyword">extends</span> <span class="title class_">AbstractAccessDecisionManager</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decide</span><span class="params">(Authentication authentication, Object object,</span></span><br><span class="line"><span class="params">Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">deny</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">for</span> (AccessDecisionVoter voter : getDecisionVoters()) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> voter.vote(authentication, object, configAttributes);</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (result) &#123;</span><br><span class="line">    <span class="keyword">case</span> AccessDecisionVoter.ACCESS_GRANTED:</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> AccessDecisionVoter.ACCESS_DENIED:</span><br><span class="line">      deny++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deny &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(messages.getMessage(</span><br><span class="line"><span class="string">&quot;AbstractAccessDecisionManager.accessDenied&quot;</span>, <span class="string">&quot;Access is denied&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>admin은 일반 user권한 페이지 또한 접근이 가능해야한다. 이를 위해 아래처럼 수정해보자.<br>roleHierarchy 를 등록하기 위해 아래절차를 거치는것임. roleHierarchy 를 추가한것 외엔 기존 AffirmativeBased 디폴트 설정과 동일하게 쓰는것임</p><blockquote><p>위에서 말했듯이 AccessDecisionManager를 등록해놓지 않으면 기본적으로 AffirmativeBased를 쓰게 된다.</p></blockquote><p><strong><code>SecurityConfig.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> AccessDecisionManager <span class="title function_">accessDecisionManager</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">RoleHierarchyImpl</span> <span class="variable">roleHierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">  roleHierarchy.setHierarchy(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_USER&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">DefaultWebSecurityExpressionHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityExpressionHandler</span>();</span><br><span class="line">  handler.setRoleHierarchy(roleHierarchy);</span><br><span class="line"></span><br><span class="line">  <span class="type">WebExpressionVoter</span> <span class="variable">webExpressionVoter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebExpressionVoter</span>();</span><br><span class="line">  webExpressionVoter.setExpressionHandler(handler);</span><br><span class="line"></span><br><span class="line">  List&lt;AccessDecisionVoter&lt;? <span class="keyword">extends</span> <span class="title class_">Object</span>&gt;&gt; voters = Arrays.asList(webExpressionVoter);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AffirmativeBased</span>(voters);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  http.authorizeRequests()</span><br><span class="line">    .mvcMatchers(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/info&quot;</span>, <span class="string">&quot;/account/**&quot;</span>).permitAll()</span><br><span class="line">    .mvcMatchers(<span class="string">&quot;/admin&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">    .mvcMatchers(<span class="string">&quot;/user&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">    .anyRequest().authenticated()</span><br><span class="line">    .accessDecisionManager(accessDecisionManager())</span><br><span class="line">    ;</span><br><span class="line">  http.formLogin();</span><br><span class="line">  http.httpBasic();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래는 AccessDecisionManager를 오버라이딩 하는방식이 아닌 AccessDecisionManager가 사용하는 expressionHandler만 교체해서 사용함 . 더욱 간단해보이지?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SecurityExpressionHandler <span class="title function_">expressionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RoleHierarchyImpl</span> <span class="variable">roleHierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">        roleHierarchy.setHierarchy(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_USER&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DefaultWebSecurityExpressionHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityExpressionHandler</span>();</span><br><span class="line">        handler.setRoleHierarchy(roleHierarchy);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/info&quot;</span>, <span class="string">&quot;/account/**&quot;</span>).permitAll()</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/admin&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">                .mvcMatchers(<span class="string">&quot;/user&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .expressionHandler(expressionHandler());</span><br><span class="line">        http.formLogin();</span><br><span class="line">        http.httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="FilterSecurityInterceptor-인가-연관"><a href="#FilterSecurityInterceptor-인가-연관" class="headerlink" title="FilterSecurityInterceptor (인가 연관)"></a>FilterSecurityInterceptor (인가 연관)</h3><p>AccessDecisionManager는 도대체 어디서 사용하는것일까? FilterSecurityInterceptor!</p><p>FilterSecurityInterceptor란?<br>AccessDecisionManager를 사용하여 Access Control 또는 예외 처리 하는 필터.<br>FilterChainProxy가 들고있는 여러개의 필터중 하나이며 대부분의 경우 제일 마지막 필터로 들어있다.</p><p>인증이 마지막에 ConfigAttributes를 만족하는지 확인하는 필터가 되겠다.</p><p>FilterSecurityInterceptor의 부모클래스인 AbstractSecurityInterceptor를 보면<br>accessDecisionManager를 활용해서 decision을 한다.<br><strong><code>AbstractSecurityInterceptor.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.accessDecisionManager.decide(authenticated, object, attributes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-ExceptionTranslationFilter-인증-인가-연관"><a href="#19-ExceptionTranslationFilter-인증-인가-연관" class="headerlink" title="19.    ExceptionTranslationFilter (인증,인가 연관)"></a>19.    ExceptionTranslationFilter (인증,인가 연관)</h3><p>FilterSecurityInterceptor에서 발생한 AccessDeniedException과 AuthenticationException을 처리하는 필터<br>(정확히는 FilterSecurityInterceptor 상위클래스인    AbstractSecurityInterceptor 에서 발생한것을 처리)</p><p>AuthenticationException 발생 시<br>●    AuthenticationEntryPoint 실행<br>●    AbstractSecurityInterceptor 하위 클래스(예, FilterSecurityInterceptor)에서 발생하는 예외만 처리.<br>●    그렇다면 UsernamePasswordAuthenticationFilter에서 발생한 인증 에러는? ExceptionTranslationFilter 가 처리하지 않고 UsernamePasswordAuthenticationFilter 상위클래스인 AbstractAuthenticationProcessingFilter에서 처리됨</p><p><strong><code>AbstractAuthenticationProcessingFilter.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span> (AuthenticationException failed) &#123;</span><br><span class="line">  <span class="comment">// Authentication failed</span></span><br><span class="line">  unsuccessfulAuthentication(request, response, failed);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AccessDeniedException 발생 시<br>●    익명 사용자라면 AuthenticationEntryPoint 실행 - 로그인이 안된 사용자가 admin있는 페이지 접속<br>●    익명 사용자가 아니면 AccessDeniedHandler에게 위임 - 로그인이 된 user 사용자가 admin 페이지 접속</p><p>ExceptionTranslationFilter 생김새는 다음과 같다<br><strong><code>ExceptionTranslationFilter.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (exception <span class="keyword">instanceof</span> AuthenticationException) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> AccessDeniedException) &#123;</span><br><span class="line">    <span class="keyword">if</span> (authenticationTrustResolver.isAnonymous(authentication)) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>SecurityContextHolder - Authentication정보를 담고있는 SecurityContextHolder<br>AuthenticationManager(ProviderManager를 보통 많이씀) - 인증(Authentication)은 AuthenticationManager가 한다.<br>AuthenticationProvider - ProviderManager가 리스트로 갖고있음<br>SecurityContextPersisenceFilter - SecurityContext를 HTTP session에 캐시(기본 전략)하여 여러 요청에서 Authentication을 공유할 수 있게하는 필터.<br>UsernamePasswordAuthenticationFilter - 폼 인증을 처리하는 시큐리티 필터&#x2F;인증된 Authentication 객체를 SecurityContextHolder에 넣어주는 필터<br>AbstractAuthenticationProcessingFilter - UsernamePasswordAuthenticationFilter가 상속하는 필터(추상클래스).<br>FilterChainProxy - filterChains를 활용해</p><p>AccessDecisionManager - 인가를 할 땐 AccessDecisionManager 를 쓴다. 여러개의 AccessDecisionVoter(투표자)가 있으며 AccessDecisionManager 구현체로는 최소하나(디폴트), 다수결, 만장일치 가 있다.<br>FilterSecurityInterceptor - AccessDecisionManager는 도대체 어디서 사용하는것일까? FilterSecurityInterceptor!<br>ExceptionTranslationFilter - FilterSecurityInterceptor에서 발생한 AccessDeniedException과 AuthenticationException을 처리하는 필터</p><h3 id="ignoring"><a href="#ignoring" class="headerlink" title="ignoring()"></a>ignoring()</h3><p>시큐리티 설정 중 하나임.</p><p>지금까진 모든 요청은 필터를 활용해왔다.<br>하지만 static 데이터들은 필터들을 적용하고 싶지 않다!(ex 파비콘아이콘)</p><p>스프링 부트가 제공하는 PathRequest를 사용해서 정적 자원 요청을 스프링 시큐리티 필터를 적용하지 않도록 설정.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           web.ignoring().requestMatchers(PathRequest.toStaticResources().atCommonLocations());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래처럼 해도 되지 않나??</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           http.authorizeRequests()</span><br><span class="line">                     .mvcMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                     .mvcMatchers(<span class="string">&quot;/admin&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">                     .requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해도 되긴하는데 아래 방식은 추천하지 않음.<br>위의 경우 거치는 필터가 0개지만<br>아래 방식으로 할 경우 15개 필터를 모두 거치게 된다</p><p>특정 리소스에 대해 인증, 인가를 거치고 싶으면 위에서 .exclude()를 활용하면 된다,</p><p>요약<br>이런 설정으로도 같은 결과를 볼 수는 있지만 스프링 시큐리티 필터가 적용된다는 차이가 있다.<br>● 동적 리소스는 http.authorizeRequests()에서 처리하는 것을 권장합니다.<br>● 정적 리소스는 WebSecurity.ignore()를 권장하며 예외적인 정적 자원 (인증이 필요한<br>정적자원이 있는 경우)는 http.authorizeRequests()를 사용할 수 있습니다.</p><h3 id="시큐리티-필터중-최상위-클래스인-WebAsyncManagerIntegrationFilter"><a href="#시큐리티-필터중-최상위-클래스인-WebAsyncManagerIntegrationFilter" class="headerlink" title="시큐리티 필터중 최상위 클래스인 WebAsyncManagerIntegrationFilter"></a>시큐리티 필터중 최상위 클래스인 WebAsyncManagerIntegrationFilter</h3><p>스프링 mvc async handler를 지원하는 핸들러임<br>시큐리티 컨텍스트가 threadlocal을 사용하기 때문에 동일 스레드에서만 시큐리티 컨텍스트를 쓸 수 있는데<br>다른 쓰레드에서도 시큐리티 컨텍스트를 쓸 수 있도록 도와주는 필터가 WebAsyncManagerIntegrationFilter</p><p>스프링 MVC의 Async 기능(핸들러에서 Callable을 리턴할 수 있는 기능)을 사용할 때에도 SecurityContext를 공유하도록 도와주는 필터.</p><p>WebAsyncManagerIntegrationFilter<br>● PreProcess: SecurityContext를 설정한다.<br>● Callable: 비록 다른 쓰레드지만 그 안에서는 동일한 SecurityContext를 참조할 수 있다.<br>● PostProcess: SecurityContext를 정리(clean up)한다.</p><p>아래처럼 코드를 구성했을 때 Callable에 대한 설명<br>           call메소드를 호출하고 리퀘스트를 처리하고 있던 쓰레드를 반환 후 call()이 완료되면 그 때 응답을 보냄. 두페이지로 처리하는것!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/async-handler&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Callalbe&lt;String&gt; <span class="title function_">syncHandler</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;String&gt; () &#123;</span><br><span class="line">                     <span class="meta">@Override</span></span><br><span class="line">                     <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래를 돌려보면 쓰레드는 다르지만 Authentication정보는 유지된다.. 이를 WebAsyncManagerIntegrationFilter가 해주는것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/async-handler&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Callalbe&lt;String&gt; <span class="title function_">syncHandler</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="comment">//톰캣이 할당한 NIO 쓰레드 부분</span></span><br><span class="line">          log(<span class="string">&quot;MVC&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;String&gt; () &#123;</span><br><span class="line">                     <span class="meta">@Override</span></span><br><span class="line">                     <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                               <span class="comment">//별도의 쓰레드 영역</span></span><br><span class="line">                               SecurityLogger.log(<span class="string">&quot;Callable&quot;</span>);</span><br><span class="line">                               <span class="keyword">return</span> <span class="string">&quot;async handler&quot;</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityLogger</span> &#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String message)</span> &#123;</span><br><span class="line">                     System.out.println(message);</span><br><span class="line">                     <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.getCurrentThread();</span><br><span class="line">                     System.out.println(threade.getName());</span><br><span class="line">                     <span class="type">Object</span> <span class="variable">principal</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">                     System.out.println(<span class="string">&quot;principal: &quot;</span> + principal);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="스프링-시큐리티와-Async"><a href="#스프링-시큐리티와-Async" class="headerlink" title="스프링 시큐리티와 @Async"></a>스프링 시큐리티와 @Async</h3><blockquote><p>@Async를 사용하기 위해선 @EnableAsync 를 붙여야함(추가로 쓰레드풀 설정을 해줘야 더 올바르게 쓸 수 있다)</p></blockquote><p>@Async를 사용한 서비스를 호출하는 경우<br>● 쓰레드가 다르기 때문에 SecurityContext를 공유받지 못한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMappint(&quot;/async-service&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">asyncService</span><span class="params">()</span> &#123;</span><br><span class="line">          SecurityLogger.log(<span class="string">&quot;MVC, before async service&quot;</span>);</span><br><span class="line">          samplerService.asyncService();</span><br><span class="line">          SecurityLogger.log(<span class="string">&quot;MVC, after async service&quot;</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;Async Service&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncService</span><span class="params">()</span> &#123;</span><br><span class="line">          SecurityLogger.log(<span class="string">&quot;async Service&quot;</span>); <span class="comment">// NPE 발생</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>@Async를 사용하면 서비스 안에서 SecurityContextHolder.getContext().getAuthentication().getPrincipal(); 에서 NPE가 찍히는것을 확인할 수 있다..<br>기본적으로 SecurityContextHolder는 strategy를 선택할 수 있다. 즉 SecurityContextHolder를 어디까지 유지할것인가를 선택할 수 있다(기본은 ThreadLocal. 즉 쓰레드 내)</p><p>아래처럼 설정하면 현재 쓰레드에서 생성하는 하위 쓰레드까지 공유가 된다<br>● SecurityContext를 자식 쓰레드에도 공유하는 전략.<br>● @Async를 처리하는 쓰레드에서도 SecurityContext를 공유받을 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">proteceted <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurty http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           http.authorizeRequests()</span><br><span class="line">           .mvcMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">           ....</span><br><span class="line"></span><br><span class="line">           SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_INHERITABLETHREADLOCAL);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SecurityContext-영속화-필터-SecurityContextPersistenceFilter"><a href="#SecurityContext-영속화-필터-SecurityContextPersistenceFilter" class="headerlink" title="SecurityContext 영속화 필터: SecurityContextPersistenceFilter"></a>SecurityContext 영속화 필터: SecurityContextPersistenceFilter</h3><p>여러 요청간 시큐리티 콘텍스트를 공유할 수 있게해주는 필터로써 두번째에 위치한다(첫번째는 WebAsyncManagerIntegrationFilter)<br>최초 인증 후 재 리퀘스트를 날려도 인증정보가 유지됨.</p><p>SecurityContextRepository를 사용하는데 SecurityContextRepository의 기본 구현체가 HTTPSessionSecurityContextRepository이다.<br>즉 HTTPSession에서 읽어오는것이다. 처음엔 HTTPSession엔 아무런 정보가 없는데 비어있을 때 비어있는 시큐리티 컨텍스트를 만들때도 SecurityContextPersistenceFilter가 활용이 된다. 기존에 HTTPSesion에 시큐리티 컨텍스트가 저장되어 있는경우에도 가져와 활용한다.<br>그러므로 모든 인증 필터들 보다 위에 있어야 한다. 필터 중 두번째에 위치함</p><p>SecurityContextRepository를 사용해서 기존의 SecurityContext를 읽어오거나 초기화 한다.<br>● 기본으로 사용하는 전략은 HTTP Session을 사용한다.<br>● Spring Session과 연동하여 세션 클러스터를 구현할 수 있다</p><h3 id="시큐리티-관련-헤더-추가하는-필터-HeaderWriterFilter"><a href="#시큐리티-관련-헤더-추가하는-필터-HeaderWriterFilter" class="headerlink" title="시큐리티 관련 헤더 추가하는 필터: HeaderWriterFilter"></a>시큐리티 관련 헤더 추가하는 필터: HeaderWriterFilter</h3><p>직접 신경쓰지 않아도 되는필터임</p><p>응답 헤더에 시큐리티 관련 헤더를 추가해주는 필터로써 세번째 필터임(첫번째는 WebAsyncManagerIntegrationFilter&#x2F; 두번째는 SecurityContextPersistenceFilter &#x2F; 세번째는 HeaderWriterFilter)</p><p>XContentTypeOptionsHeaderWriter: 마임 타입 스니핑 방어.<br>XXssProtectionHeaderWriter: 브라우저에 내장된 XSS 필터 적용.<br>CacheControlHeadersWriter: 캐시 히스토리 취약점 방어.<br>HstsHeaderWriter: HTTPS로만 소통하도록 강제.<br>XFrameOptionsHeaderWriter: clickjacking 방어.</p><p>Cache-Control: no-cache, no-store, max-age&#x3D;0, must-revalidate<br>Content-Language: en-US<br>Content-Type: text&#x2F;html;charset&#x3D;UTF-8<br>Date: Sun, 04 Aug 2019 16:25:10 GMT<br>Expires: 0<br>Pragma: no-cache<br>Transfer-Encoding: chunked<br>X-Content-Type-Options: nosniff<br>X-Frame-Options: DENY<br>X-XSS-Protection: 1; mode&#x3D;block</p><p>기본적으로 다섯개의 HeaderWriter가 적용된다.<br>● XContentTypeOptionsHeaderWriter: 마임 타입 스니핑 방어.<br>브라우저가 마임타입을 판단하려고 컨텐츠를 분석하는 경우가 있다. 그럴 경우 보안상 이슈가 발생할 수 있다.<br>X-Content-Type-Options: nosniff 을 주면 반드시 Content-Type으로만 랜더링 하도록 되어있다. 즉 브라우저가 추가적인 실행을 하지 않기 때문에 보안상 안전하다</p><p>● XXssProtectionHeaderWriter: 브라우저에 내장된 XSS 필터 적용.<br>XSS를 방어해주는것. 브라우저마다 내장된 XSS 필터가 있는데 이 필터로 공격을 방어할 순 없으나 최소한 1차적으로 공격을 걸러낼 수 있다.<br>X-XSS-Protection: 1; mode&#x3D;block 에서 1이 그 기능을 활성화 하는것이고 mode&#x3D;block가 막아준다는 옵션임<br>이걸 켜 놓고 부가적으로 커스텀한 XSS 필터를 적용할 수 있다..</p><p>● CacheControlHeadersWriter: 캐시 히스토리 취약점 방어.<br>Cache-Control: no-cache, no-store, max-age&#x3D;0, must-revalidate<br>Expires: 0<br>Pragma: no-cache<br>위 세개 옵션을 활용해서 캐시를 쓰지 않도록 설정하는것.<br>정적인 리소스는 캐시를 쓰면 좋지만 동적인 리소스는 민감한 정보가 포함되어 있을 수 있기때문에 그런경우에 대한 방어를 하고자 캐시를 비워주는것</p><p>● HstsHeaderWriter: HTTPS로만 소통하도록 강제.<br>Strict-Transport-Security: max-age&#x3D;31536000; includeSubDomains 이런 정보가 샘플로 나간다.</p><p>● XFrameOptionsHeaderWriter: clickjacking 방어.<br>iframe, object, http 그런걸 넣을 수 있는데 보이지 않은 영역에 뭘 누르면 내 정보가 가도록 설정되어 있을 수 있다. 그걸 clickjacking 이라 하는데 이걸 방어하는것으로 아래 헤더정보를 추가한다.<br>X-Frame-Options: DENY</p><h3 id="CSRF-어택-방지-필터-CsrfFilter-네번째-필터"><a href="#CSRF-어택-방지-필터-CsrfFilter-네번째-필터" class="headerlink" title="CSRF 어택 방지 필터: CsrfFilter (네번째 필터)"></a>CSRF 어택 방지 필터: CsrfFilter (네번째 필터)</h3><p>CSRF 어택을 방지하는 필터임<br>Cross site request forgery - 원치않는 요청을 임의로 만들어서 보내는것.<br>인증된 유저의 계정을 사용해 악의적인 변경 요청을 만들어 보내는 기법.<br>은행사이트에 로그인 후 나쁜사이트에 접속했는데 나쁜사이트에서 재밌어 보이는걸 눌렀는데 은행으로 요청을 보냄</p><p>모든 대부분의 요청은 same origin이라 해서 요청하는곳이 일치해야하지만 경우에 따라서 다른 도메인에서의 요청을 허용해야 하는 경우가 있다.<br>이 경우 인증서를 사용하거나 특정 도메인들한테 열어주는것(CORS)가 있다.<br>CORS를 사용할 때 특히 주의 해야 함. 타 도메인에서 보내오는 요청을 허용하기 때문에…</p><p>스프링시큐리티에선 이 경우 CsrfFilter을 활용해서 특정한 토큰(CSRF 토큰)을 활용한다.<br>이를 활용하여 리소스를 변경하는 요청의 경우 서버에서 발급한 토큰이 있는지 확인한다.</p><p>은행이 만들어준 form에는 csrf 토큰이 들어있고 나쁜 사이트가 만들어준 form에는 csrf 토큰이 없기 때문에 은행서버에선 잘못된 요청을 인지할 수 있다.<br>(스프링 시큐리티에서 제공하는 기본 로그인 화면에서도 폼에 csrf가 설정되어있는것을 확인할 수 있다.)<br>restapi에서도 csrf 토큰을 적용할 순 있다. form 기반에선 리소스를 변경하는 요청에는 csrf 토큰을 활용하는것을 추천한다.</p><p>CsrfFilter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(csrfToken.getToken().equals(actualToken)) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>csrf 토큰을 사용하지 않고 싶을 땐 http.csrf().disable(); 를 추가해주면 됨</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">proteceted <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurty http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">           http.authorizeRequests()</span><br><span class="line">           .mvcMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">           ....</span><br><span class="line"></span><br><span class="line">           http.csrf().disable();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="28-CSRF-토큰-사용-예제"><a href="#28-CSRF-토큰-사용-예제" class="headerlink" title="28.    CSRF 토큰 사용 예제"></a>28.    CSRF 토큰 사용 예제</h3><p>JSP에서 스프링 MVC가 제공하는 <a href="form:form">form:form</a> 태그 또는 타임리프 2.1+ 버전을 사용할 때 폼에 CRSF 히든 필드가 기본으로 생성 됨.<br>get요청인 경우 csrf 토큰 확인안하지만 post 요청인 경우 확인한다<br>포스트맨으로 post로 form으로 로그인 api 호출하면 401이 발생한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignUpControllerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">signUpForm</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        mockMvc.perform(get(<span class="string">&quot;/signup&quot;</span>))</span><br><span class="line">                .andDo(print())</span><br><span class="line">                .andExpect(content().string(containsString(<span class="string">&quot;_csrf&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">procesSignUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        mockMvc.perform(post(<span class="string">&quot;/signup&quot;</span>)</span><br><span class="line">            .param(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;keesun&quot;</span>)</span><br><span class="line">            .param(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123&quot;</span>)</span><br><span class="line">            .with(csrf()))</span><br><span class="line">                .andExpect(status().is3xxRedirection());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="29-로그아웃-처리-필터-LogoutFilter"><a href="#29-로그아웃-처리-필터-LogoutFilter" class="headerlink" title="29.    로그아웃 처리 필터: LogoutFilter"></a>29.    로그아웃 처리 필터: LogoutFilter</h3><p>LogoutHandler, LogoutSuccessHandler가 있다.</p><p>LogoutHandler는 composite 객체로써 다른 여러가지 핸들러를 감싸고 있는 composite타입이여서 사실상 여러개의 핸들러를 사용하고 있는것임<br><strong><code>CompositeLogoutHandler.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CompositeLogoutHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;LogoutHandler&gt; logoutHandlers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CompositeLogoutHandler</span><span class="params">(LogoutHandler... logoutHandlers)</span> &#123;</span><br><span class="line">  Assert.notEmpty(logoutHandlers, <span class="string">&quot;LogoutHandlers are required&quot;</span>);</span><br><span class="line">  <span class="built_in">this</span>.logoutHandlers = Arrays.asList(logoutHandlers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (LogoutHandler handler : <span class="built_in">this</span>.logoutHandlers) &#123;</span><br><span class="line">    handler.logout(request, response, authentication);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LogoutSuccessHandler는 로그아웃을 끝내고 난 후 어떤처리를 할것인지에 대한 핸들러임</p><p>기본으론 SimplUrlLogoutSuccessHandler가 명시되어있는 쪽으로 이동시켜 준다.</p><p>로그아웃 페이지로 가면 로그아웃 창이 뜨는데 이는 DefaultLogoutPageGeneratingFilter가 만들어 준것이다.</p><p>거기서 로그아웃 버튼을 눌렀을 때 (실제로그아웃이 일어났을 때) 로그아웃 필터가 해준다.</p><p><strong><code>LogoutFilter.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (requiresLogout(request, response)) &#123;  <span class="comment">//로그아웃요청만 if문안에 들어감</span></span><br><span class="line">  <span class="type">Authentication</span> <span class="variable">auth</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.handler.logout(request, response, auth);</span><br><span class="line">  logoutSuccessHandler.onLogoutSuccess(request, response, auth);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위에서 logout를 호출하면 CompositeLogoutHandler logout로 오게되는데 기본적으로<br>얘는 여러 로그아웃 핸들러를 들고있고(this.logoutHandlers) 우리가 임의로 추가할 수 있다.</p><p>기본적으로는 2개를 들고있는데<br>하나는 CsrfLogoutHandlers이고 하나는 SecurityContextLogoutHandler이다.<br><strong><code>CompositeLogoutHandler.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (LogoutHandler handler : <span class="built_in">this</span>.logoutHandlers) &#123;</span><br><span class="line">handler.logout(request, response, authentication);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>logout 후 위에서 logoutSuccessHandler.onLogoutSuccess를 호출하게 되는데 기본적으로 로그인 페이지로 가도록 되어있다.</p><p>근데 얘를 &#x2F; 로 바꾸고 싶으면 아래처럼 하면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">http.logout()</span><br><span class="line">        .loginUrl(<span class="string">&quot;/logout&quot;</span>)    <span class="comment">// logout 하는 주소</span></span><br><span class="line">        .logoutSuccessUrl(<span class="string">&quot;/&quot;</span>); <span class="comment">// logout 후 주소</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="폼-인증-처리-필터-UsernamePasswordAuthenticationFilter"><a href="#폼-인증-처리-필터-UsernamePasswordAuthenticationFilter" class="headerlink" title="폼 인증 처리 필터: UsernamePasswordAuthenticationFilter"></a>폼 인증 처리 필터: UsernamePasswordAuthenticationFilter</h3><p>로그인 버튼을 눌렀을 때 이를 처리하는것이 UsernamePasswordAuthenticationFilter<br>UsernamePasswordAuthenticationFilter는 사용자가 폼에 입력한 username과 password로 Authentcation을 만들고<br>AuthenticationManager를 사용하여 인증을 시도한다</p><p>UsernamePasswordAuthenticationFilter 를 보면 UsernamePasswordAuthenticationToken을 만듦. 이후 AuthenticationManager를 활용해 인증을 시도함.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authRequest</span> <span class="operator">=</span> UsernamePasswordAuthenticationToken(username, password);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br></pre></td></tr></table></figure><p>AuthenticationManager는 AuthenticationManager의 구현체인 ProviderManager를 사용하는데 ProviderManager는 여러개의 AuthenticationProvider을 갖고있는데 얘한테 위임해서 인증처리를 위임해서 함.<br>AuthenticationProvider 또한 자신이 처리하지 못할경우 부모한테 위임해서 처리를 함.</p><p>AuthenticationProvider 중에서 DaoAuthenticationProvider를 사용하는데 얘는 UserDetailService를 사용하는데 얘가 바로  UserDetailService를 구현한 (우리가만든)놈이다.</p><p>인증이 끝나면 AbstractAuthenticationProcessingFilter(UsernamePasswordAuthenticationFilter 가 상속함) 쪽에서 SecurityContextHolder에다 넣어준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SecurityContextHolder.getContext().setAuthentication(authResult);</span><br></pre></td></tr></table></figure><h3 id="DefaultLoginPageGeneratingFilter"><a href="#DefaultLoginPageGeneratingFilter" class="headerlink" title="DefaultLoginPageGeneratingFilter"></a>DefaultLoginPageGeneratingFilter</h3><p>로그인 페이지를 만들어주는 필터<br>get으로 로그인 api에 들어오면 로그인 페이지로 넘겨줌</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin()</span><br><span class="line">           .loginPage(<span class="string">&quot;/login&quot;</span>)         <span class="comment">//얘를 붙이면 DefaultLoginPageGeneratingFilter, DefaultLogoutPageGeneratingFilter 가 등록이 안됨.(LogoutFilter는 유지됨)</span></span><br><span class="line">                                <span class="comment">// 커스텀한 로그인페이지를 쓴다고 인지하기 때문</span></span><br><span class="line">           .usernameParameter(<span class="string">&quot;my-username&quot;</span>)         <span class="comment">// 파라미터 변경</span></span><br><span class="line">           .passwordParameter(<span class="string">&quot;my-password&quot;</span>);</span><br><span class="line">           .</span><br></pre></td></tr></table></figure><h3 id="로그인-x2F-로그아웃-폼-커스터마이징"><a href="#로그인-x2F-로그아웃-폼-커스터마이징" class="headerlink" title="로그인&#x2F;로그아웃 폼 커스터마이징"></a>로그인&#x2F;로그아웃 폼 커스터마이징</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin()</span><br><span class="line">           .loginPage(<span class="string">&quot;/signin&quot;</span>)                 </span><br><span class="line">          <span class="comment">// 이 옵션을 추가하면 DefaultLoginPageGeneratingFilter, DefaultLogoutPageGeneratingFilter 가 등록이 안됨.</span></span><br><span class="line">           <span class="comment">// 즉 로그인, 로그아웃 페이지를 만들어줘야함</span></span><br><span class="line">           .permitAll();</span><br></pre></td></tr></table></figure><p>signin 에 get 으로 들어오면 form을 보여주고 post로 들어오면 UsernamePasswordAuthenticationFilter 가 처리한다.</p><p>get으로 들어오는 페이지를 보여주는 컨트롤러만 생성하면 됨. post signin은 UsernamePasswordAuthenticationFilter 가 처리해줌</p><p>위에서 말한대로 loginPage(“&#x2F;signin”) 를 적용하면 Logout 뷰도 사라지기 때문에 새로 만들어줘야한다.</p><h3 id="Basic-인증-처리-필터-BasicAuthenticationFilter"><a href="#Basic-인증-처리-필터-BasicAuthenticationFilter" class="headerlink" title="Basic 인증 처리 필터: BasicAuthenticationFilter"></a>Basic 인증 처리 필터: BasicAuthenticationFilter</h3><p>요청 헤더에 username와 password를 실어 보내면 브라우저 또는 서버가 그 값을 읽어서 인증하는 방식.<br>예)  Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l<br>QWxhZGRpbjpPcGVuU2VzYW1l &lt;- (keesun:123 을 BASE 64인코딩한것)</p><p>보통, 브라우저 기반 요청이 클라이언트의 요청을 처리할 때 자주 사용.<br>● 보안에 취약하기 때문에 반드시 HTTPS를 사용할 것을 권장.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.httpBasic();</span><br></pre></td></tr></table></figure><p>curl -u keesun:123 http:localhost:8080</p><p>BasicAuthenticationFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//form 로그인은 form에서 읽어왔지만 Basic 인증의 경우에는 헤더에서 읽어옴</span></span><br><span class="line"><span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authRequest</span> <span class="operator">=</span> <span class="built_in">this</span>.authenticationConverter.convert(request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (authenticationIsRequired(username)) &#123;</span><br><span class="line">                                          <span class="type">Authentication</span> <span class="variable">authResult</span> <span class="operator">=</span> <span class="built_in">this</span>.authenticationManager.authenticate(authRequest);</span><br><span class="line">                                          <span class="type">SecurityContext</span> <span class="variable">context</span> <span class="operator">=</span> SecurityContextHolder.createEmptyContext();</span><br><span class="line">                                          context.setAuthentication(authResult);</span><br><span class="line">                                          SecurityContextHolder.setContext(context);</span><br><span class="line"></span><br><span class="line">                                          <span class="built_in">this</span>.rememberMeServices.loginSuccess(request, response, authResult);          <span class="comment">//이부분 강의시점엔 없는데 추가된듯??</span></span><br><span class="line">                                          <span class="built_in">this</span>.securityContextRepository.saveContext(context, request, response);         <span class="comment">//이부분 강의시점엔 없는데 추가된듯??</span></span><br><span class="line">                                          onSuccessfulAuthentication(request, response, authResult);</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>repo 에 저장하는건 없기에 form 로그인처럼 로그인이 유지되진 않는다. 즉 form로그인과 다르게 stateless 함.<br>강의시점엔 로그인이 유지되진 않았으나 인증이 유지되도록 변경된듯 하다.</p><h3 id="요청-캐시-필터-RequestCacheAwareFilter"><a href="#요청-캐시-필터-RequestCacheAwareFilter" class="headerlink" title="요청 캐시 필터: RequestCacheAwareFilter"></a>요청 캐시 필터: RequestCacheAwareFilter</h3><p>현재 요청과 관련 있는 캐시된 요청이 있는지 찾아서 적용하는 필터.<br>● 캐시된 요청이 없다면, 현재 요청 처리<br>● 캐시된 요청이 있다면, 해당 캐시된 요청 처리</p><p>대시보드 페이지로 접속했는데 로그인 페이지로 넘어가게 될 경우 대시보드 요청이 캐시에 저장이 되어있다가 로그인이 완료되면 캐시에 있는걸 꺼내서 대시보드로 연결시켜줌</p><h3 id="시큐리티-관련-서블릿-스팩-구현-필터-SecurityContextHolderAwareRequestFilter"><a href="#시큐리티-관련-서블릿-스팩-구현-필터-SecurityContextHolderAwareRequestFilter" class="headerlink" title="시큐리티 관련 서블릿 스팩 구현 필터: SecurityContextHolderAwareRequestFilter"></a>시큐리티 관련 서블릿 스팩 구현 필터: SecurityContextHolderAwareRequestFilter</h3><p>서블릿3 스펙을 지원하는 일을 함. 그중에서 시큐리티 관련된 스프링 시큐리티 기반으로 구현을 매꿔줌</p><p>HttpServletRequest 클래스 안에 authenticate라는 메소드가 있는데 얘를 호출하면 인증여부를 판단하고 안되어 있으면 로그인페이지로 보냄<br>login메소드는 AuthenticationManager을 활용하서 내부 인증하는것이고<br>logout메소드는 LogoutHandler로 구현이 되어있고<br>AsynContext 의 start메소드도 지원하는데 SecurityContextHolder을 지원하는것임. 새로운 스레드에서도 SecurityContextHolder을 복사하여 사용가능케함</p><p>시큐리티 관련된 서블릿 api를 지원하는것임. 서블릿을 직접 쓸 일 이 있으면 해당 메소드를 쓰면 됨. 뒷단은 결국 스프링 시큐리티 기반으로 동작함</p><h3 id="익명-인증-필터-AnonymousAuthenticationFilter"><a href="#익명-인증-필터-AnonymousAuthenticationFilter" class="headerlink" title="익명 인증 필터: AnonymousAuthenticationFilter"></a>익명 인증 필터: AnonymousAuthenticationFilter</h3><p> 아무도 인증하지 않은 요청일 때 인증이 안된사용자를 AnonymousAuthentication로 만들어 SecurityContextHolder에 넣어준다<br>null object pattern 이라 해서 null 대신에 null을 대변하는 객체를 넣는 패턴임.<br>타 필터를 보면 종종 Anonymous 를 판단해서 분기하는 로직이 종종있다.<br>principal named은 기본적으로 “anonymousUser”이고<br>authority은 기본적으로 “ROLE_ANONYMOUS”.<br>아래코드를 활용할 경우 변경할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http.anonymous()</span><br><span class="line">.principal(<span class="string">&quot;auser&quot;</span>)</span><br><span class="line">.authorities(<span class="string">&quot;ROLE_A&quot;</span>)</span><br><span class="line">.key()</span><br></pre></td></tr></table></figure><h3 id="세션-관리-필터-SessionManagementFilter"><a href="#세션-관리-필터-SessionManagementFilter" class="headerlink" title="세션 관리 필터: SessionManagementFilter"></a>세션 관리 필터: SessionManagementFilter</h3><p><code>기능 1. 세션 변조 방지 전략 설정: sessionFixation</code><br>공격자가 웹사이트에 로그인 해서 쿠키를 받아오고 희생자는 공격자의 쿠키로 로그인을 함. 그럼 공격자는 희생자의 정보를 읽어들일 수 있음.<br>해결방법”인증 후 세션 id나 정보를 바꿔 어택커의 쿠키로 희생자의 정보를 볼 수 없도록 함.<br>스프링 시큐리티는 세션변조 방지전략이 서블릿 컨테이너에 따라 달라짐.<br>● none<br>● newSession<br>● migrateSession (서블릿 3.0- 컨테이너 사용시 기본값)<br>● changeSessionId (서브릿 3.1+ 컨테이너 사용시 기본값) - 위에서 말한 세션 id를 바꾸는 전략<br>서블릿 3.0 이하부터 migrateSession전략을 쓰는데 이는 인증이 되었을 때 새로운 세션을 새로 만들고 세션에 있는 정보들을 복사해 오는것임.<br>changeSessionId는 copy과정이 없기에 migrateSession보다 빠름</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.sessionManagement()</span><br><span class="line">.newSession() / .migrateSeesion()/ .changeSessionId() / .none()를 선택할 수 있다.</span><br></pre></td></tr></table></figure><p><code>기능 2. 유효하지 않은 세션을 리다이렉트 시킬 URL 설정</code><br>로그아웃했을 때 해당세션은 유효하지 않기 때문에 어디로 보낼지 설정가능함</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.sessionManagement().invalidSessionUrl(<span class="string">&quot;/error&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>기능 3. 동시성 제어</code><br>여러 로그인을 막고싶을때 사용함</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http.sessionManagement()</span><br><span class="line">.maximumSession(<span class="number">1</span>)</span><br><span class="line">.expiredUrl()<span class="comment">// 다중로그인로 인해 만료가 되었을 때 어디로 보낼것인지</span></span><br><span class="line">.maxSessionsPreventsLogin(<span class="literal">true</span>) <span class="comment">// 새로운 세션로그인을 불가능하게 할것이다</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>동시성 제어: maximumSessions<br>● 추가 로그인을 막을지 여부 설정 (기본값, false)</p><p><code>기능 4. 세션생성전략</code><br>아래 4가지가 들어갈 수 있다.<br>● IF_REQUIRED - 기본값. 필요할때 만들어서 사용<br>● NEVER    - 새로 만들진 않지만 있으면 갖다가 쓴다<br>● STATELESS    - 세션이 있더라도 쓰지 않음(캐싱된것도 안쓴다)<br>● ALWAYS</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http.sessionManagement()</span><br><span class="line">.sessionCreationPolicy(IF_REQUIRED)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>여러개의 서버를 띄울 때 세션을 관리하고자 하면 spring session을 써서 세션 클러스터링을 할 수 있다.</p><h3 id="인증-x2F-인가-예외-처리-필터-ExceptionTranslationFilter"><a href="#인증-x2F-인가-예외-처리-필터-ExceptionTranslationFilter" class="headerlink" title="인증&#x2F;인가 예외 처리 필터: ExceptionTranslationFilter"></a>인증&#x2F;인가 예외 처리 필터: ExceptionTranslationFilter</h3><p>마지막에서 두번째 앞에 위치함<br>마지막 필터인 FilterSecurityInterceptor와 밀접한 관계가 있음<br> ExceptionTranslationFilter가 FilterSecurityInterceptor보다 앞서 위치해서 FilterSecurityInterceptor를 감싸서 실행해야함.<br>FilterSecurityInterceptor의 구현체가 AccessDecisionManager, AffirmativeBased이고 얘네를 활용해서 인가처리를 하는데 이 때 인증관련예외, 인가 관련예외가 발생할 수 있는데 이게 발생하면 ExceptionTranslationFilter는 각 예외에 맞는 처리를 한다.<br>AuthenticationException이 발생하면 ExceptionTranslationFilter가 갖고있는 AuthenticationEntryPoint를 사용하여 예외를 처리함(해당 유저를 인증할 수 있게 인증이 가능한 페이지로 보내는것)<br>AccessDeniedException이 발생하면 ExceptionTranslationFilter가 갖고있는 AccessDeniedHandler를 사용하여 처리를 하는데 기본처리는 403 에러메세지를 보여주는것이다.</p><p>AccessDeniedException을 커스텀한 페이지로 보내고 싶다면 간단하게 아래처럼 하면된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling()</span><br><span class="line">.accessDeniedPage(<span class="string">&quot;/access-denied&quot;</span>);</span><br></pre></td></tr></table></figure><p>서버단에 로그를 남기고 싶다면</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http.exceptionHandling()</span><br><span class="line">.accessDeniedHandler((request, response, accessDeniedException) -&gt; &#123;</span><br><span class="line">  <span class="type">UserDetails</span> <span class="variable">principal</span> <span class="operator">=</span> (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">  <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> principal.getUsername();</span><br><span class="line">  <span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> request.getServletPath();</span><br><span class="line">  System.out.println(username + <span class="string">&quot; is denied to access to &quot;</span> + servletPath);</span><br><span class="line">  response.sendRedirect(<span class="string">&quot;/access-denied&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="인가-처리-필터-FilterSecurityInterceptor"><a href="#인가-처리-필터-FilterSecurityInterceptor" class="headerlink" title="인가 처리 필터: FilterSecurityInterceptor"></a>인가 처리 필터: FilterSecurityInterceptor</h3><p>기본적으로 등록하는 필터중 가장 마지막에 있는 필터<br>HTTP 리소스 시큐리티 처리를 담당하는 필터. AccessDecisionManager를 사용하여 인가를 처리한다.</p><p>antPattern()도 지원되고 mvcMatcher() 또는 regexMatcher()도 사용해도 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">.mvcMatchers(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/info&quot;</span>, <span class="string">&quot;/account/**&quot;</span>, <span class="string">&quot;/signup&quot;</span>).permitAll()</span><br><span class="line">.mvcMatchers(<span class="string">&quot;/admin&quot;</span>).hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">.mvcMatchers(<span class="string">&quot;/user&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">.anyRequest().authenticated()<span class="comment">//어떤 권한을 갖던 인증을 하기만 하면 접근가능</span></span><br><span class="line">.anyRequest().fullyAuthenticated() <span class="comment">//이전까진 rememberme로 동작하다 중요한 때 다시 인증을 요청하는것</span></span><br><span class="line">.expressionHandler(expressionHandler());</span><br></pre></td></tr></table></figure><p>hasRole은 hasAuthority의 하위개념임 .hasRole(“USER”) .hasAuthority(“ROLE_USER”) 은 동일하다고 보면 됨<br>마찬가지로 아래코드에서 .roles(account.getRole()) 는 .authorities(“ROLE_”+account.getRole()) 와 같은것임</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> User.builder()</span><br><span class="line">.username(account.getUsername())</span><br><span class="line">.password(account.getPassword())</span><br><span class="line">.roles(account.getRole())</span><br><span class="line">.build();</span><br></pre></td></tr></table></figure><p>즉 .roles() 는 prefix로 ROLE_가 붙음</p><h3 id="토큰-기반-인증-필터-RememberMeAuthenticationFilter"><a href="#토큰-기반-인증-필터-RememberMeAuthenticationFilter" class="headerlink" title="토큰 기반 인증 필터 : RememberMeAuthenticationFilter"></a>토큰 기반 인증 필터 : RememberMeAuthenticationFilter</h3><p>로그인할 때 로그인 기억하기 체크박스를 본적 있을것이다. 세션이 종료되거나 만료되어도 세션보다 더 긴 것으로 쿠키나 토큰이 브라우저에 남아있거나 서버 디비에 남아있거나 함.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http.rememberMe()</span><br><span class="line">.userDetailsService(accountService)</span><br><span class="line">.tokenValiditySeconds(<span class="number">10</span>) <span class="comment">//기본 2주가 유지됨</span></span><br><span class="line">.useSecureCookie(<span class="literal">true</span>)</span><br><span class="line"> <span class="comment">//https만 쿠키에 접근가능하도록 하는것. https를 적용한다면 true로 해주면 좋다. 쿠키가 노출되면 취약하기에...</span></span><br><span class="line">.key(<span class="string">&quot;remember-me-sample&quot;</span>);</span><br></pre></td></tr></table></figure><p>위를 적용하면 브라우저 내 remember-me-sample 키를 갖는 쿠기가 추가된다.<br>로그인을 하면 jsseionId, remember-me-sample 두개가 있는것을 확인할 수 있고, jsessionId를 지우고 리프레시를 해도 재로그인이 필요없고 jsessionId가 다시 생긴것을 확인할 수 있다.</p><p>jsessionId를 지우고 remember-me-sample만 갖고있는 상황에서 request를 날리면 <code>SecurityContextHolder.getContext().getAuthentication() == null</code> 가 충족하고 rememberMeAuth로 인증을 한다. 인증 후엔 SecurityContextHolder에 넣어준다.</p><p><strong><code>RememberMeAuthenticationFilter.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (SecurityContextHolder.getContext().getAuthentication() == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">Authentication</span> <span class="variable">rememberMeAuth</span> <span class="operator">=</span> rememberMeServices.autoLogin(request,</span><br><span class="line">        response);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rememberMeAuth != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// Attempt authenticaton via AuthenticationManager</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        rememberMeAuth = authenticationManager.authenticate(rememberMeAuth);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Store to SecurityContextHolder</span></span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(rememberMeAuth);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="커스텀필터-추가하기"><a href="#커스텀필터-추가하기" class="headerlink" title="커스텀필터 추가하기"></a>커스텀필터 추가하기</h3><p>서블릿 필터를 만들어서 활용해도 되고 GenericFilterBean 을 상속받아서 클래스를 만들어도 됨<br>그러면 doFilter()만 오버라이딩 하면 됨</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingFilter</span> <span class="keyword">extends</span> <span class="title class_">GenericFilterBean</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">    stopWatch.start(((HttpServletRequest)request).getRequestURI());</span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    logger.info(stopWatch.prettyPrint());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>addFilterAfter() 메소드로 어디 뒤에놓을지, addFilterBefroe() 메소드로 어디 앞에놓을지 설정 가능</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.addFilterAfter(<span class="keyword">new</span> <span class="title class_">LoggingFilter</span>(), UsernamePasswordAuthenticationFilter.class);</span><br></pre></td></tr></table></figure><h3 id="메소드-시큐리티"><a href="#메소드-시큐리티" class="headerlink" title="메소드 시큐리티"></a>메소드 시큐리티</h3><p>웹이아니라 평범한 애플리케이션일 때 활용할 수 있도록 하는것<br>@Secured와 @RollAllowed @PreAuthorize와 @PostAuthorize 를 서비스단의 메소드에 붙이고 서비스 호출 전 Authencation을 만들어 SecurityContextHolder에 넣어서 서비스 메소드 호출가능여부를 판단</p><h3 id="AuthenticationPrincipal"><a href="#AuthenticationPrincipal" class="headerlink" title="@AuthenticationPrincipal"></a>@AuthenticationPrincipal</h3><p>@AuthenticationPrincipal을 활용하면 UserDetailsService 구현체에서 리턴하는 객체를 매개변수로 받을 수 있다.</p><p><strong><code>UserAccount.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAccount</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Account account;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">UserAccount</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(account.getUsername(), account.getPassword(), List.of(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_&quot;</span> + account.getRole())));</span><br><span class="line">    <span class="built_in">this</span>.account = account;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Account <span class="title function_">getAccount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> account;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>UserDetails.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">  <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountRepository.findByUsername(username);</span><br><span class="line">  <span class="keyword">if</span> (account == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(username);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserAccount</span>(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserDetailsService 구현체에서 리턴하는 객체를 매개변수로 받을 수 있다.<br>그 안에 들어있는 Account객체를 getter를 통해 참조할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">xxx</span><span class="params">(Model model, <span class="meta">@AuthenticationPrincipal</span> UserAccount userAccount)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Account를 바로 받을 수 있도록 바꿔보자</p><p>아래처럼 어노테이션을 생성하고</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.PARAMETER)</span></span><br><span class="line"><span class="meta">@AuthenticationPrincipal(expression = &quot;#this == &#x27;anonymousUser&#x27; ? null : account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CurrentUser &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserAccount안에 있는 account를 꺼낸다는 의미<br>아래처럼 만들어주면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">xxx</span><span class="params">(Model model, <span class="meta">@CurrentUser</span> Account account)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2022/03/24/spring-security/when_login.jpg" class="" title="whenLoginFLow">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1부&quot;&gt;&lt;a href=&quot;#1부&quot; class=&quot;headerlink&quot; title=&quot;1부&quot;&gt;&lt;/a&gt;1부&lt;/h2&gt;&lt;p&gt;Principal principal는 아규먼트 리졸버로 받아서 처리된다.&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring Security" scheme="http://KKimSangHeon.github.io/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>ServerMonitoring Tool 개발</title>
    <link href="http://KKimSangHeon.github.io/2022/02/09/ServerMonitoring/"/>
    <id>http://KKimSangHeon.github.io/2022/02/09/ServerMonitoring/</id>
    <published>2022-02-09T12:19:52.000Z</published>
    <updated>2022-06-11T07:50:03.301Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ServerMonitoring-개발"><a href="#ServerMonitoring-개발" class="headerlink" title="ServerMonitoring 개발"></a>ServerMonitoring 개발</h3><p>한 관리자가 여러 서버를 한눈에 관리할 수 있는 웹 페이지가 있으면 좋겠다고 생각을 했고 djang, vue를 공부해볼겸 진행해본 프로젝트.</p><h4 id="벤치마킹"><a href="#벤치마킹" class="headerlink" title="벤치마킹"></a>벤치마킹</h4><p>다음 항목들을 벤치마킹하여 어떤식으로 활용될 수 있나 참고하였다.<br><code>Ansible</code> <code>Jenifer</code> <code>datadog</code> <code>skwissh</code> <code>netdata</code> <code>munin</code></p><h4 id="사용기술"><a href="#사용기술" class="headerlink" title="사용기술"></a>사용기술</h4><p><code>django (python)</code><br><code>django admin</code><br><code>vue</code><br><code>sqlite3</code><br><code>ORM</code><br><code>WSGI</code><br><code>conda</code><br><code>shell script</code></p><h3 id="설계"><a href="#설계" class="headerlink" title="설계"></a>설계</h3><p>django 서버에서 여러 서버로 ssh로 접속 후 명령어를 질의하고 응답을 가져오는 형태.<br>client는 django 서버로 rest api 을 활용하여 서버의 현 상태를 파악할 수 있는 시스템을 개발하고자 함.</p><p>Server Monitoring &#x2F; Management<br>    - yml 파일 활용하여 서버 구성 추가 및 관리<br>    - Process 모니터링 &#x2F; 특정 Process가 열고있는 포트 확인 &#x2F; 특정 프로세스 kill<br>    - CPU 사용율<br>    - Memory 사용율<br>    - Disk 사용율<br>    - 방화벽 개방여부 확인<br>    - File &#x2F; Directory 조회</p><p>Installation<br>    - UI 상 모듈 install 기능 제공</p><p>Scheduler<br>    - Cron Job 관리<br>    - 즉시실행<br>    - 종료</p><h3 id="ERD"><a href="#ERD" class="headerlink" title="ERD"></a>ERD</h3><img src="/2022/02/09/ServerMonitoring/command.png" class="" title="작동화면"><p>다수 서버 관리라는 특성상 서버의 OS, version에 따라 달라질 수 있는 부분(ex. 명령어)이 있기에 확장성을 고려한 설계를 하고자 하였음<br>CommandType은 어떤 행위를 할 지 추상적인 명칭을 나타내며 Command는 CommandType에 명시된 행위를 실행하기 위한 상세설명의 의미를 갖는다.</p><img src="/2022/02/09/ServerMonitoring/K-000.png" class="" title="서버등록"><p>서버는 위와 같이 Django admin페이지에서 등록 후 활용가능하다.</p><img src="/2022/02/09/ServerMonitoring/ERD.png" class="" title="ERD"><h3 id="기능"><a href="#기능" class="headerlink" title="기능"></a>기능</h3><p>모든 기능은 우측 상된에 선택된 서버 내에서 발생합니다.</p><img src="/2022/02/09/ServerMonitoring/K-001.png" class="" title="설치패키지 조회"><p>설치된 패키지 조회 및 삭제기능</p><img src="/2022/02/09/ServerMonitoring/K-002.png" class="" title="패키지 설치"><p>필요 파일 업로드 후 설치<br>rpm 파일을 업로드할 경우 django서버에 파일이 업로드되고 설치버튼을 누르면 현재 선택된 서버에 설치된다.</p><img src="/2022/02/09/ServerMonitoring/K-003.png" class="" title="CPU사용률"><p>cpu 사용율 조회</p><img src="/2022/02/09/ServerMonitoring/K-004.png" class="" title="memory 조회"><p>memory 조회. top 명령어 기반으로 동작하므로 해당 명령어 실행이 실패할 경우 위와 같이 alert창이 뜬다.</p><img src="/2022/02/09/ServerMonitoring/K-005.png" class="" title="terminal"><p>terminal과 같이 여러 명령어를 입력하여 확인할 수 있다.</p><img src="/2022/02/09/ServerMonitoring/K-006.png" class="" title="firewall"><p>방화벽 오픈여부를 확인한다.</p><img src="/2022/02/09/ServerMonitoring/K-007.png" class="" title="프로세스를 확인"><p>현재 동작중인 프로세스를 확인하며 해당 프로세스가 열고 있는 port 확인, process kill 또한 가능하다.</p><img src="/2022/02/09/ServerMonitoring/K-008.png" class="" title="directory 상세 조회"><p>directory 상세 조회</p><img src="/2022/02/09/ServerMonitoring/K-009.png" class="" title="terminal"><p>위 화면에서 시나리오를 등록할 수 있다.<br>시나리오란 일련의 동작이 정해진 주기마다 돌도록 하는 기능이다.</p><img src="/2022/02/09/ServerMonitoring/K-015.png" class="" title="시나리오 등록"><p>CRON expression, DATE, INTERVAL 을 지원하며 Drag &amp; Drop로 아래와 같이 시나리오를 작성할 수 있다.</p><img src="/2022/02/09/ServerMonitoring/K-011.png" class="" title="Action"><p>스케줄을 생성할 때 세부 동작을 Action이라 한다.<br>시나리오는 한개의 Source, N개의 Destination으로 구성된다.</p><p>Source는 Cpu사용율, file tail, 프로세스 검색이 있으며 Destination 으로는 HTTPGet, Post, SlackNotification을 설정할 수 있다.</p><img src="/2022/02/09/ServerMonitoring/K-013.png" class="" title="Action"><p>다음과 같이 오전 0850분에 SlackNotification이 오도록 설정해 두면 서비스 모니터링도구로써 활용할 수 있다.</p><img src="/2022/02/09/ServerMonitoring/slack.png" class="" title="SlackMessage"><p>위와 같이 지정된 시간에 메세지가 온다.</p><img src="/2022/02/09/ServerMonitoring/K-016.png" class="" title="서버접속로그"><p>ssh를 통한 서버접속 히스토리를 볼 수 있는 화면이다.</p><img src="/2022/02/09/ServerMonitoring/K-017.png" class="" title="ipinfo"><p>ipinfo버튼을 클릭하면 접속한 ip에 대한 자세한 정보를 확인할 수 있다.</p><img src="/2022/02/09/ServerMonitoring/K-018.png" class="" title="접속실패로그"><p>ssh를 통해 접속을 시도했으나 실패한 히스토리이다.</p><img src="/2022/02/09/ServerMonitoring/K-019.png" class="" title="ipinfo"><p>ipinfo버튼을 클릭하면 접속을 시도한 ip에 대한 자세한 정보를 확인할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ServerMonitoring-개발&quot;&gt;&lt;a href=&quot;#ServerMonitoring-개발&quot; class=&quot;headerlink&quot; title=&quot;ServerMonitoring 개발&quot;&gt;&lt;/a&gt;ServerMonitoring 개발&lt;/h3&gt;&lt;p&gt;한 
      
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="My Projects" scheme="http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"/>
    
    
      <category term="Django" scheme="http://KKimSangHeon.github.io/tags/Django/"/>
    
      <category term="Vuejs" scheme="http://KKimSangHeon.github.io/tags/Vuejs/"/>
    
  </entry>
  
  <entry>
    <title>django model사용시 one to many , many to one 활용</title>
    <link href="http://KKimSangHeon.github.io/2021/03/22/django/"/>
    <id>http://KKimSangHeon.github.io/2021/03/22/django/</id>
    <published>2021-03-22T13:14:10.000Z</published>
    <updated>2022-02-09T11:44:22.827Z</updated>
    
    <content type="html"><![CDATA[<h3 id="order-x2F-detail-order가-있을-때"><a href="#order-x2F-detail-order가-있을-때" class="headerlink" title="order &#x2F; detail order가 있을 때"></a>order &#x2F; detail order가 있을 때</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">many to one일때</span><br><span class="line">detail_order = DetailOrder.objects.select_related(&#x27;order&#x27;).get(id=request.data[&#x27;id&#x27;])</span><br><span class="line"></span><br><span class="line">one  to many일땐</span><br><span class="line">order = order.objects.filter(id=1).prefetch_related(&quot;detail_order&quot;)</span><br><span class="line"></span><br><span class="line">remain_detail_order = DetailOrder.objects.filter(order__id=detail_order.order.id).count()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;order-x2F-detail-order가-있을-때&quot;&gt;&lt;a href=&quot;#order-x2F-detail-order가-있을-때&quot; class=&quot;headerlink&quot; title=&quot;order &amp;#x2F; detail order가 있을 때&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Django" scheme="http://KKimSangHeon.github.io/categories/Web-App/Django/"/>
    
    
      <category term="Django" scheme="http://KKimSangHeon.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs EventBus 공통모듈로 사용할 때 모든 페이지가 이벤트를 수신하는 상황</title>
    <link href="http://KKimSangHeon.github.io/2021/03/22/vue/"/>
    <id>http://KKimSangHeon.github.io/2021/03/22/vue/</id>
    <published>2021-03-22T13:04:31.000Z</published>
    <updated>2022-02-09T11:44:22.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="이벤트버스를-공통함수로-빼서-사용할-때의-이슈"><a href="#이벤트버스를-공통함수로-빼서-사용할-때의-이슈" class="headerlink" title="이벤트버스를 공통함수로 빼서 사용할 때의 이슈"></a>이벤트버스를 공통함수로 빼서 사용할 때의 이슈</h3><p>헤더에서 특정값을 변경하면 라우터 뷰에 정의된 페이지도 변경되어야 해서 특정값 변경시 헤더에서 event emit하도록 해놓음…</p><p>이벤트 버스를 공통모듈로 쓰니 해당 이벤트 버스를 쓰는 모든 화면들이 해당 이벤트를 수신하여 난리가남…<br>(SPA라 그런가…. 더 알아볼것.)</p><p>화면이 바뀌면 이벤트를 수신하도록 on 걸어놓은것들은 파괴될줄 알았는데…</p><p>무튼 해결방법은 모든 페이지에 접근할 때마다  created() 내에서 해당 이벤트를 지우고 신규로 등록하도록 하는것.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">    EventBus.$off(&#x27;change-server&#x27;);</span><br><span class="line">    EventBus.$on(&#x27;change-server&#x27;, function() &#123;~~~~&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또는 해당 페이지가 destory 될 때 없애버리기….</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy()&#123;</span><br><span class="line">    EventBus.$off(&#x27;change-server&#x27;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">created()&#123;</span><br><span class="line">  EventBus.$on(&#x27;change-server&#x27;, function() &#123;~~~~&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;이벤트버스를-공통함수로-빼서-사용할-때의-이슈&quot;&gt;&lt;a href=&quot;#이벤트버스를-공통함수로-빼서-사용할-때의-이슈&quot; class=&quot;headerlink&quot; title=&quot;이벤트버스를 공통함수로 빼서 사용할 때의 이슈&quot;&gt;&lt;/a&gt;이벤트버스를 공통함수
      
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Vuejs" scheme="http://KKimSangHeon.github.io/categories/Web-App/Vuejs/"/>
    
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/tags/Web/"/>
    
      <category term="Vuejs" scheme="http://KKimSangHeon.github.io/tags/Vuejs/"/>
    
  </entry>
  
  <entry>
    <title>django model사용시 queryset의 values 활용</title>
    <link href="http://KKimSangHeon.github.io/2021/02/21/django-model-values/"/>
    <id>http://KKimSangHeon.github.io/2021/02/21/django-model-values/</id>
    <published>2021-02-21T13:08:56.000Z</published>
    <updated>2022-02-09T11:44:22.824Z</updated>
    
    <content type="html"><![CDATA[<p>model을 조회하고 이를 response로 리턴할 때 values를 활용하면 유용함.</p><h3 id="쿼리셋-편하게-리턴하기-values"><a href="#쿼리셋-편하게-리턴하기-values" class="headerlink" title="쿼리셋 편하게 리턴하기 - values()"></a>쿼리셋 편하게 리턴하기 - values()</h3><p>단순히 values() 를 활용할 경우 detail_order 내 외래키로 걸린 object들은 key만 리턴되는데..</p><p>아래의 경우 postnatal_care_man의 username 필드가 필요하여 아래와 같이 처리하였다.</p><p>values() 사용시 <code>__</code>을 잘 사용하면 좋을듯하다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> detail_order_list = DetailOrder.objects.filter(order__customer=finder).values(</span><br><span class="line">  &#x27;id&#x27;,</span><br><span class="line">  &#x27;road_address&#x27;,</span><br><span class="line">  &#x27;detail_address&#x27;,</span><br><span class="line">  &#x27;order_id&#x27;,</span><br><span class="line">  &#x27;start_time&#x27;,</span><br><span class="line">  &#x27;end_time&#x27;,</span><br><span class="line">  &#x27;detail&#x27;,</span><br><span class="line">  &#x27;postnatal_care_man__username&#x27;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Response(detail_order_list.values(), status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;model을 조회하고 이를 response로 리턴할 때 values를 활용하면 유용함.&lt;/p&gt;
&lt;h3 id=&quot;쿼리셋-편하게-리턴하기-values&quot;&gt;&lt;a href=&quot;#쿼리셋-편하게-리턴하기-values&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Django" scheme="http://KKimSangHeon.github.io/categories/Web-App/Django/"/>
    
    
      <category term="Django" scheme="http://KKimSangHeon.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>django model inner join - orm</title>
    <link href="http://KKimSangHeon.github.io/2021/02/21/django-model-join/"/>
    <id>http://KKimSangHeon.github.io/2021/02/21/django-model-join/</id>
    <published>2021-02-21T13:01:41.000Z</published>
    <updated>2022-02-09T11:44:22.823Z</updated>
    
    <content type="html"><![CDATA[<p>django model의 inner 조인방법</p><p>order, detail_order 이라는 모델이 있을 때</p><h4 id="detail-order을-가져올-때-order내-customer이라는-컬럼을-통해-조인하는-방법"><a href="#detail-order을-가져올-때-order내-customer이라는-컬럼을-통해-조인하는-방법" class="headerlink" title="detail order을 가져올 때 order내 customer이라는 컬럼을 통해 조인하는 방법"></a>detail order을 가져올 때 order내 customer이라는 컬럼을 통해 조인하는 방법</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">detail_order_list = DetailOrder.objects.filter(order__customer=finder)</span><br><span class="line">둘 다 결과 동일</span><br><span class="line">detail_order_list = DetailOrder.objects.select_related(&#x27;order&#x27;).filter(order__customer=finder)</span><br></pre></td></tr></table></figure><p>즉 ‘__’ 를 잘 활용하자…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;django model의 inner 조인방법&lt;/p&gt;
&lt;p&gt;order, detail_order 이라는 모델이 있을 때&lt;/p&gt;
&lt;h4 id=&quot;detail-order을-가져올-때-order내-customer이라는-컬럼을-통해-조인하는-방법&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Django" scheme="http://KKimSangHeon.github.io/categories/Web-App/Django/"/>
    
    
      <category term="Django" scheme="http://KKimSangHeon.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>git hard reset</title>
    <link href="http://KKimSangHeon.github.io/2021/02/21/hardReset/"/>
    <id>http://KKimSangHeon.github.io/2021/02/21/hardReset/</id>
    <published>2021-02-21T12:48:33.000Z</published>
    <updated>2022-02-09T11:44:22.825Z</updated>
    
    <content type="html"><![CDATA[<p>가끔 돌아올수없는 길을 건넜을 때 그냥 돌려버리고 싶을 때….만 활용하자</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line"></span><br><span class="line">돌아가기 원하는 시점의 commit 복사</span><br><span class="line"></span><br><span class="line">$ git reset --hard  &#123;commit ID&#125;</span><br><span class="line"></span><br><span class="line">$ git push -f origin master</span><br></pre></td></tr></table></figure><h4 id="remote-rejected-master-gt-master-pre-receive-hook-declined-발생시"><a href="#remote-rejected-master-gt-master-pre-receive-hook-declined-발생시" class="headerlink" title="! [remote rejected] master -&gt; master (pre-receive hook declined) 발생시"></a>! [remote rejected] master -&gt; master (pre-receive hook declined) 발생시</h4><p>gitlab에서 소스 프로젝트-&gt;세팅-&gt;protected branches에 developer can push라는 체크박스가 있는데 체크 후 unprotect 버튼 클릭 후 재시도</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;가끔 돌아올수없는 길을 건넜을 때 그냥 돌려버리고 싶을 때….만 활용하자&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>리눅스 서버간 파일 동기화</title>
    <link href="http://KKimSangHeon.github.io/2021/02/21/rsync/"/>
    <id>http://KKimSangHeon.github.io/2021/02/21/rsync/</id>
    <published>2021-02-21T12:32:39.000Z</published>
    <updated>2022-02-09T11:44:22.826Z</updated>
    
    <content type="html"><![CDATA[<p>원격지에 있는 서버에 ftp로 접속하고 파일을 올리지 않고 명령어 한줄로도 가능한 방법이 있음..</p><h3 id="rsync-amp-scp"><a href="#rsync-amp-scp" class="headerlink" title="rsync &amp; scp"></a>rsync &amp; scp</h3><p>원격지에서 데이터를 갖고오기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz &#123;원격지서버IP&#125;:/postgres/11/postgres</span><br></pre></td></tr></table></figure><p>원격지로 디렉토리 보내기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r &#123;옮길디렉토리&#125; root@&#123;업로드대상서버IP&#125;:&#123;디렉토리&#125;</span><br></pre></td></tr></table></figure><p>원격지에서 디렉토리 가져오기</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r root@&#123;원격지서버IP&#125;:&#123;디렉토리&#125; &#123;저장할 디렉토리&#125;</span><br></pre></td></tr></table></figure><h3 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h3><p>원격에 있는 파일과 디렉토리를 복사하고 동기화 하기 위해 사용하는 툴.</p><h3 id="rsync-amp-lyncd를-활용한-postgres-서버-동기화"><a href="#rsync-amp-lyncd를-활용한-postgres-서버-동기화" class="headerlink" title="rsync &amp; lyncd를 활용한 postgres 서버 동기화"></a>rsync &amp; lyncd를 활용한 postgres 서버 동기화</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># systemctl enable lsyncd</span><br><span class="line"># systemctl start lsyncd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">서버1</span><br><span class="line">#ssh-keygen</span><br><span class="line">모두 enter</span><br><span class="line"># ssh-copy-id –p 22 root@111.111.111.111</span><br><span class="line"># ssh root@111.111.111.111 ( ssh 접속 확인 )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">서버2</span><br><span class="line">#ssh-keygen</span><br><span class="line">모두 enter</span><br><span class="line"># cat ~/.ssh/id_rsa.pub | ssh –p 22 root@000.000.000.000 “mkdir –p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys”</span><br><span class="line"># ssh root@000.000.000.000. ( ssh 접속 확인 )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">서버1, 서버2</span><br><span class="line"># vi /etc/lsyncd.conf</span><br><span class="line"></span><br><span class="line">settings &#123;</span><br><span class="line">logfile=&quot;/logs/lsyncd.log&quot;,</span><br><span class="line">statusFile=&quot;/logs/lsyncd-status.log&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sync &#123;</span><br><span class="line">default.rsyncssh,# rsync 아님</span><br><span class="line">source=&quot;/data/nas&quot;,</span><br><span class="line">host=&quot;동기화 대상 ip&quot;,</span><br><span class="line">targetdir=&quot;/data/nas&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">systemctl restart lsyncd</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;원격지에 있는 서버에 ftp로 접속하고 파일을 올리지 않고 명령어 한줄로도 가능한 방법이 있음..&lt;/p&gt;
&lt;h3 id=&quot;rsync-amp-scp&quot;&gt;&lt;a href=&quot;#rsync-amp-scp&quot; class=&quot;headerlink&quot; title=&quot;rsyn
      
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue 네아로(네이버아이디)로 로그인 기능 구현</title>
    <link href="http://KKimSangHeon.github.io/2021/01/04/naveroauth/"/>
    <id>http://KKimSangHeon.github.io/2021/01/04/naveroauth/</id>
    <published>2021-01-04T01:42:27.000Z</published>
    <updated>2022-02-09T11:44:22.821Z</updated>
    
    <content type="html"><![CDATA[<p>vue를 활용한 naver 아이디로 로그인 기능 구현</p><h3 id="플로우"><a href="#플로우" class="headerlink" title="플로우"></a>플로우</h3><ol><li>front에서 code를 얻고</li><li>code를 서버로 던지고</li><li>서버에서 code를 활용하여 토큰을 얻고</li><li>얻은 토큰을 통해 사용자 정보를 조회함</li></ol><h3 id="문제사항"><a href="#문제사항" class="headerlink" title="문제사항"></a>문제사항</h3><p>위 1번과정 중 네이버 아이디로 로그인 버튼을 클릭시 axios get함수를 활용하여 코드를 얻으려 하니 CORS 에러가 발생</p><figure class="highlight plaintext"><figcaption><span>Access to XMLHttpRequest at 'https://nid.naver.com/oauth2.0/authorize?response_type</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>카카오 아이디로 로그인의 경우 해당 에러가 발생하지 않았는데… 네이버 서버에서 헤더에 CORS관련 세팅을 안해줘서 그렇다고 생각한다.</p><h3 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h3><p>해당방법이 적합한 방법인지는 확실하지 않으나 여러 사이트들의 네이버아이디로 로그인에 대해 살펴보니 해당방법으로 처리한것을 확인할 수 있었음.</p><h4 id="해결방법상세"><a href="#해결방법상세" class="headerlink" title="해결방법상세"></a>해결방법상세</h4><p>아래의 주소로 직접 접속하면 리다이렉트도 정상적으로 되고, 코드값도 쿼리파람을 통해 확인할 수 있었음</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://nid.naver.com/oauth2.0/authorize?response_type=code&amp;client_id=XXXXXXXXXXXX&amp;redirect_uri=http%3A%2F%2F127.0.0.1%3A8080%2FnaverLogin&amp;state=78577e6c-3f10-4146-910c-3fd4e684dfb5</span><br></pre></td></tr></table></figure><p>그래서 네이버 아이디로 로그인 버튼 클릭시 axios를 활용하지 않고 위 주소로 페이지 이동을 하도록 처리함.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.location.href = authUri</span><br></pre></td></tr></table></figure><p>리다이렉트 된 곳에선 쿼리파람을 통해 얻은 code, state를 서버로 보내도록 함<br>이후 서버에선 <code>https://nid.naver.com/oauth2.0/token</code>을 호출하여 토큰을 얻고 <code>https://openapi.naver.com/v1/nid/me</code> 에 접속해서 사용자 데이터를 얻어옴.</p><p>http get 함수로만 구현되어있는게 약간 독특했던 기억..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vue를 활용한 naver 아이디로 로그인 기능 구현&lt;/p&gt;
&lt;h3 id=&quot;플로우&quot;&gt;&lt;a href=&quot;#플로우&quot; class=&quot;headerlink&quot; title=&quot;플로우&quot;&gt;&lt;/a&gt;플로우&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;front에서 code를 얻고&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/CS/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu usb설치시 발생하는 오류 해결방법</title>
    <link href="http://KKimSangHeon.github.io/2020/11/24/linux-1/"/>
    <id>http://KKimSangHeon.github.io/2020/11/24/linux-1/</id>
    <published>2020-11-24T12:28:18.000Z</published>
    <updated>2022-02-09T11:44:22.819Z</updated>
    
    <content type="html"><![CDATA[<p>데스크톱에 usb를 활용하여 우분투를 설치하며 꽤 오랜시간 삽질을 했었는데 gpu와 충돌로 인한 문제였다.</p><p>증상은 설치화면으로 들어가지지 않고 어찌어찌 설치를 완료해도 부팅이 안되는 문제…</p><p>해결방법<br><a href="http://ejklike.github.io/2017/03/05/install-ubuntu-16.04-with-nvidia-gpu.html">http://ejklike.github.io/2017/03/05/install-ubuntu-16.04-with-nvidia-gpu.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;데스크톱에 usb를 활용하여 우분투를 설치하며 꽤 오랜시간 삽질을 했었는데 gpu와 충돌로 인한 문제였다.&lt;/p&gt;
&lt;p&gt;증상은 설치화면으로 들어가지지 않고 어찌어찌 설치를 완료해도 부팅이 안되는 문제…&lt;/p&gt;
&lt;p&gt;해결방법&lt;br&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
  </entry>
  
</feed>
